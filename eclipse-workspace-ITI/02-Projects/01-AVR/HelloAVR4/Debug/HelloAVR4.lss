
HelloAVR4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d50  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b4  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <main>
  64:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInitialize>:
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 83       	st	Z, r24
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
  82:	e4 e3       	ldi	r30, 0x34	; 52
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
  88:	e1 e3       	ldi	r30, 0x31	; 49
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	10 82       	st	Z, r1
  8e:	cf 91       	pop	r28
  90:	df 91       	pop	r29
  92:	08 95       	ret

00000094 <DIO_u8SetPinDirection>:
										DIO_U8_PIN30_DIR,
										DIO_U8_PIN31_DIR);
								
}

u8 DIO_u8SetPinDirection(u8 u8PinNB, u8 u8Direction) {
  94:	df 93       	push	r29
  96:	cf 93       	push	r28
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	27 97       	sbiw	r28, 0x07	; 7
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	8c 83       	std	Y+4, r24	; 0x04
  aa:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
  ac:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
  ae:	8c 81       	ldd	r24, Y+4	; 0x04
  b0:	80 32       	cpi	r24, 0x20	; 32
  b2:	18 f0       	brcs	.+6      	; 0xba <DIO_u8SetPinDirection+0x26>
		u8ErrorState =1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	bb c0       	rjmp	.+374    	; 0x230 <DIO_u8SetPinDirection+0x19c>
	}else if ((u8Direction != DIO_U8_INPUT ) && (u8Direction != DIO_U8_OUTPUT)){
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	88 23       	and	r24, r24
  be:	31 f0       	breq	.+12     	; 0xcc <DIO_u8SetPinDirection+0x38>
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	19 f0       	breq	.+6      	; 0xcc <DIO_u8SetPinDirection+0x38>
		u8ErrorState =1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	8b 83       	std	Y+3, r24	; 0x03
  ca:	b2 c0       	rjmp	.+356    	; 0x230 <DIO_u8SetPinDirection+0x19c>
	}
	else{
		u8ErrorState =0 ;
  cc:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
  d6:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
  d8:	8c 81       	ldd	r24, Y+4	; 0x04
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	3f 83       	std	Y+7, r19	; 0x07
  e6:	2e 83       	std	Y+6, r18	; 0x06
  e8:	6e 81       	ldd	r22, Y+6	; 0x06
  ea:	7f 81       	ldd	r23, Y+7	; 0x07
  ec:	61 30       	cpi	r22, 0x01	; 1
  ee:	71 05       	cpc	r23, r1
  f0:	d1 f1       	breq	.+116    	; 0x166 <DIO_u8SetPinDirection+0xd2>
  f2:	8e 81       	ldd	r24, Y+6	; 0x06
  f4:	9f 81       	ldd	r25, Y+7	; 0x07
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	91 05       	cpc	r25, r1
  fa:	34 f4       	brge	.+12     	; 0x108 <DIO_u8SetPinDirection+0x74>
  fc:	2e 81       	ldd	r18, Y+6	; 0x06
  fe:	3f 81       	ldd	r19, Y+7	; 0x07
 100:	21 15       	cp	r18, r1
 102:	31 05       	cpc	r19, r1
 104:	71 f0       	breq	.+28     	; 0x122 <DIO_u8SetPinDirection+0x8e>
 106:	94 c0       	rjmp	.+296    	; 0x230 <DIO_u8SetPinDirection+0x19c>
 108:	6e 81       	ldd	r22, Y+6	; 0x06
 10a:	7f 81       	ldd	r23, Y+7	; 0x07
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	71 05       	cpc	r23, r1
 110:	09 f4       	brne	.+2      	; 0x114 <DIO_u8SetPinDirection+0x80>
 112:	4b c0       	rjmp	.+150    	; 0x1aa <DIO_u8SetPinDirection+0x116>
 114:	8e 81       	ldd	r24, Y+6	; 0x06
 116:	9f 81       	ldd	r25, Y+7	; 0x07
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_u8SetPinDirection+0x8c>
 11e:	67 c0       	rjmp	.+206    	; 0x1ee <DIO_u8SetPinDirection+0x15a>
 120:	87 c0       	rjmp	.+270    	; 0x230 <DIO_u8SetPinDirection+0x19c>
		case 0:
			assign_bit(DIO_U8_DDRA->ByteAccess ,u8PIN_ID,u8Direction);
 122:	aa e3       	ldi	r26, 0x3A	; 58
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	ea e3       	ldi	r30, 0x3A	; 58
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_u8SetPinDirection+0xaa>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_u8SetPinDirection+0xa6>
 142:	80 95       	com	r24
 144:	48 23       	and	r20, r24
 146:	8d 81       	ldd	r24, Y+5	; 0x05
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0xc6>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0xc2>
 15e:	cb 01       	movw	r24, r22
 160:	84 2b       	or	r24, r20
 162:	8c 93       	st	X, r24
 164:	65 c0       	rjmp	.+202    	; 0x230 <DIO_u8SetPinDirection+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_DDRB->ByteAccess ,u8PIN_ID,u8Direction);
 166:	a7 e3       	ldi	r26, 0x37	; 55
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e7 e3       	ldi	r30, 0x37	; 55
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_u8SetPinDirection+0xee>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	2a 95       	dec	r18
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_u8SetPinDirection+0xea>
 186:	80 95       	com	r24
 188:	48 23       	and	r20, r24
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_u8SetPinDirection+0x10a>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_u8SetPinDirection+0x106>
 1a2:	cb 01       	movw	r24, r22
 1a4:	84 2b       	or	r24, r20
 1a6:	8c 93       	st	X, r24
 1a8:	43 c0       	rjmp	.+134    	; 0x230 <DIO_u8SetPinDirection+0x19c>
			break;

		case 2:
			assign_bit(DIO_U8_DDRC->ByteAccess ,u8PIN_ID,u8Direction);
 1aa:	a4 e3       	ldi	r26, 0x34	; 52
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e4 e3       	ldi	r30, 0x34	; 52
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_u8SetPinDirection+0x132>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	2a 95       	dec	r18
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_u8SetPinDirection+0x12e>
 1ca:	80 95       	com	r24
 1cc:	48 23       	and	r20, r24
 1ce:	8d 81       	ldd	r24, Y+5	; 0x05
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_u8SetPinDirection+0x14e>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_u8SetPinDirection+0x14a>
 1e6:	cb 01       	movw	r24, r22
 1e8:	84 2b       	or	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	21 c0       	rjmp	.+66     	; 0x230 <DIO_u8SetPinDirection+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_DDRD-> ByteAccess,u8PIN_ID,u8Direction);
 1ee:	a1 e3       	ldi	r26, 0x31	; 49
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e1 e3       	ldi	r30, 0x31	; 49
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_u8SetPinDirection+0x176>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	2a 95       	dec	r18
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_u8SetPinDirection+0x172>
 20e:	80 95       	com	r24
 210:	48 23       	and	r20, r24
 212:	8d 81       	ldd	r24, Y+5	; 0x05
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	b9 01       	movw	r22, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_u8SetPinDirection+0x192>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	8a 95       	dec	r24
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_u8SetPinDirection+0x18e>
 22a:	cb 01       	movw	r24, r22
 22c:	84 2b       	or	r24, r20
 22e:	8c 93       	st	X, r24
		default :
			break;
		}
	}
	/*Function return */
	return u8ErrorState;
 230:	8b 81       	ldd	r24, Y+3	; 0x03
}
 232:	27 96       	adiw	r28, 0x07	; 7
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	08 95       	ret

00000244 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 u8PinNB, u8 u8Value) {
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	27 97       	sbiw	r28, 0x07	; 7
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	8c 83       	std	Y+4, r24	; 0x04
 25a:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
 25c:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	80 32       	cpi	r24, 0x20	; 32
 262:	18 f0       	brcs	.+6      	; 0x26a <DIO_u8SetPinValue+0x26>
		u8ErrorState =1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	8b 83       	std	Y+3, r24	; 0x03
 268:	bb c0       	rjmp	.+374    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
	}else if ((u8Value != DIO_U8_HIGH ) && (u8Value != DIO_U8_LOW)){
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	31 f0       	breq	.+12     	; 0x27c <DIO_u8SetPinValue+0x38>
 270:	8d 81       	ldd	r24, Y+5	; 0x05
 272:	88 23       	and	r24, r24
 274:	19 f0       	breq	.+6      	; 0x27c <DIO_u8SetPinValue+0x38>
		u8ErrorState =1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8b 83       	std	Y+3, r24	; 0x03
 27a:	b2 c0       	rjmp	.+356    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
	}
	else{
		u8ErrorState =0 ;
 27c:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	86 95       	lsr	r24
 282:	86 95       	lsr	r24
 284:	86 95       	lsr	r24
 286:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	87 70       	andi	r24, 0x07	; 7
 28c:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	3f 83       	std	Y+7, r19	; 0x07
 296:	2e 83       	std	Y+6, r18	; 0x06
 298:	6e 81       	ldd	r22, Y+6	; 0x06
 29a:	7f 81       	ldd	r23, Y+7	; 0x07
 29c:	61 30       	cpi	r22, 0x01	; 1
 29e:	71 05       	cpc	r23, r1
 2a0:	d1 f1       	breq	.+116    	; 0x316 <DIO_u8SetPinValue+0xd2>
 2a2:	8e 81       	ldd	r24, Y+6	; 0x06
 2a4:	9f 81       	ldd	r25, Y+7	; 0x07
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	91 05       	cpc	r25, r1
 2aa:	34 f4       	brge	.+12     	; 0x2b8 <DIO_u8SetPinValue+0x74>
 2ac:	2e 81       	ldd	r18, Y+6	; 0x06
 2ae:	3f 81       	ldd	r19, Y+7	; 0x07
 2b0:	21 15       	cp	r18, r1
 2b2:	31 05       	cpc	r19, r1
 2b4:	71 f0       	breq	.+28     	; 0x2d2 <DIO_u8SetPinValue+0x8e>
 2b6:	94 c0       	rjmp	.+296    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
 2b8:	6e 81       	ldd	r22, Y+6	; 0x06
 2ba:	7f 81       	ldd	r23, Y+7	; 0x07
 2bc:	62 30       	cpi	r22, 0x02	; 2
 2be:	71 05       	cpc	r23, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <DIO_u8SetPinValue+0x80>
 2c2:	4b c0       	rjmp	.+150    	; 0x35a <DIO_u8SetPinValue+0x116>
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	9f 81       	ldd	r25, Y+7	; 0x07
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	91 05       	cpc	r25, r1
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <DIO_u8SetPinValue+0x8c>
 2ce:	67 c0       	rjmp	.+206    	; 0x39e <DIO_u8SetPinValue+0x15a>
 2d0:	87 c0       	rjmp	.+270    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
		case 0:
			assign_bit(DIO_U8_PORTA->ByteAccess ,u8PIN_ID,u8Value);
 2d2:	ab e3       	ldi	r26, 0x3B	; 59
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	eb e3       	ldi	r30, 0x3B	; 59
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_u8SetPinValue+0xaa>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	2a 95       	dec	r18
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_u8SetPinValue+0xa6>
 2f2:	80 95       	com	r24
 2f4:	48 23       	and	r20, r24
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_u8SetPinValue+0xc6>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_u8SetPinValue+0xc2>
 30e:	cb 01       	movw	r24, r22
 310:	84 2b       	or	r24, r20
 312:	8c 93       	st	X, r24
 314:	65 c0       	rjmp	.+202    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_PORTB->ByteAccess ,u8PIN_ID,u8Value);
 316:	a8 e3       	ldi	r26, 0x38	; 56
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e8 e3       	ldi	r30, 0x38	; 56
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_u8SetPinValue+0xee>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	2a 95       	dec	r18
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_u8SetPinValue+0xea>
 336:	80 95       	com	r24
 338:	48 23       	and	r20, r24
 33a:	8d 81       	ldd	r24, Y+5	; 0x05
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8SetPinValue+0x10a>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	8a 95       	dec	r24
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8SetPinValue+0x106>
 352:	cb 01       	movw	r24, r22
 354:	84 2b       	or	r24, r20
 356:	8c 93       	st	X, r24
 358:	43 c0       	rjmp	.+134    	; 0x3e0 <DIO_u8SetPinValue+0x19c>
			break;
		case 2:
			assign_bit(DIO_U8_PORTC->ByteAccess ,u8PIN_ID,u8Value);
 35a:	a5 e3       	ldi	r26, 0x35	; 53
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e5 e3       	ldi	r30, 0x35	; 53
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_u8SetPinValue+0x132>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_u8SetPinValue+0x12e>
 37a:	80 95       	com	r24
 37c:	48 23       	and	r20, r24
 37e:	8d 81       	ldd	r24, Y+5	; 0x05
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_u8SetPinValue+0x14e>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_u8SetPinValue+0x14a>
 396:	cb 01       	movw	r24, r22
 398:	84 2b       	or	r24, r20
 39a:	8c 93       	st	X, r24
 39c:	21 c0       	rjmp	.+66     	; 0x3e0 <DIO_u8SetPinValue+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_PORTD-> ByteAccess,u8PIN_ID,u8Value);
 39e:	a2 e3       	ldi	r26, 0x32	; 50
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e2 e3       	ldi	r30, 0x32	; 50
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	48 2f       	mov	r20, r24
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_u8SetPinValue+0x176>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	2a 95       	dec	r18
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_u8SetPinValue+0x172>
 3be:	80 95       	com	r24
 3c0:	48 23       	and	r20, r24
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8SetPinValue+0x192>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8SetPinValue+0x18e>
 3da:	cb 01       	movw	r24, r22
 3dc:	84 2b       	or	r24, r20
 3de:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 3e2:	27 96       	adiw	r28, 0x07	; 7
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	cf 91       	pop	r28
 3f0:	df 91       	pop	r29
 3f2:	08 95       	ret

000003f4 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 u8PinNB, u8* Pu8Value){
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	28 97       	sbiw	r28, 0x08	; 8
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	8c 83       	std	Y+4, r24	; 0x04
 40a:	7e 83       	std	Y+6, r23	; 0x06
 40c:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
		u8 u8ErrorState =0;
 40e:	1b 82       	std	Y+3, r1	; 0x03
		u8 u8PORT_ID ,u8PIN_ID;

		/*validate Input*/
		if (u8PinNB >=  DIO_MAXPINNB){
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	80 32       	cpi	r24, 0x20	; 32
 414:	18 f0       	brcs	.+6      	; 0x41c <DIO_u8GetPinValue+0x28>
			u8ErrorState =1;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	8b 83       	std	Y+3, r24	; 0x03
 41a:	79 c0       	rjmp	.+242    	; 0x50e <DIO_u8GetPinValue+0x11a>
		}
		else{
			u8ErrorState =0 ;
 41c:	1b 82       	std	Y+3, r1	; 0x03
			u8PORT_ID = u8PinNB /PINS_PER_PORT;
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	86 95       	lsr	r24
 422:	86 95       	lsr	r24
 424:	86 95       	lsr	r24
 426:	8a 83       	std	Y+2, r24	; 0x02
			u8PIN_ID = u8PinNB % PINS_PER_PORT;
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	87 70       	andi	r24, 0x07	; 7
 42c:	89 83       	std	Y+1, r24	; 0x01
			switch (u8PORT_ID){
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	38 87       	std	Y+8, r19	; 0x08
 436:	2f 83       	std	Y+7, r18	; 0x07
 438:	4f 81       	ldd	r20, Y+7	; 0x07
 43a:	58 85       	ldd	r21, Y+8	; 0x08
 43c:	41 30       	cpi	r20, 0x01	; 1
 43e:	51 05       	cpc	r21, r1
 440:	59 f1       	breq	.+86     	; 0x498 <DIO_u8GetPinValue+0xa4>
 442:	8f 81       	ldd	r24, Y+7	; 0x07
 444:	98 85       	ldd	r25, Y+8	; 0x08
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	91 05       	cpc	r25, r1
 44a:	34 f4       	brge	.+12     	; 0x458 <DIO_u8GetPinValue+0x64>
 44c:	2f 81       	ldd	r18, Y+7	; 0x07
 44e:	38 85       	ldd	r19, Y+8	; 0x08
 450:	21 15       	cp	r18, r1
 452:	31 05       	cpc	r19, r1
 454:	69 f0       	breq	.+26     	; 0x470 <DIO_u8GetPinValue+0x7c>
 456:	5b c0       	rjmp	.+182    	; 0x50e <DIO_u8GetPinValue+0x11a>
 458:	4f 81       	ldd	r20, Y+7	; 0x07
 45a:	58 85       	ldd	r21, Y+8	; 0x08
 45c:	42 30       	cpi	r20, 0x02	; 2
 45e:	51 05       	cpc	r21, r1
 460:	79 f1       	breq	.+94     	; 0x4c0 <DIO_u8GetPinValue+0xcc>
 462:	8f 81       	ldd	r24, Y+7	; 0x07
 464:	98 85       	ldd	r25, Y+8	; 0x08
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	91 05       	cpc	r25, r1
 46a:	09 f4       	brne	.+2      	; 0x46e <DIO_u8GetPinValue+0x7a>
 46c:	3d c0       	rjmp	.+122    	; 0x4e8 <DIO_u8GetPinValue+0xf4>
 46e:	4f c0       	rjmp	.+158    	; 0x50e <DIO_u8GetPinValue+0x11a>
			case 0:
				*Pu8Value=get_bit(DIO_U8_PINA->ByteAccess ,u8PIN_ID);
 470:	e9 e3       	ldi	r30, 0x39	; 57
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	a9 01       	movw	r20, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_u8GetPinValue+0x94>
 484:	55 95       	asr	r21
 486:	47 95       	ror	r20
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_u8GetPinValue+0x90>
 48c:	ca 01       	movw	r24, r20
 48e:	81 70       	andi	r24, 0x01	; 1
 490:	ed 81       	ldd	r30, Y+5	; 0x05
 492:	fe 81       	ldd	r31, Y+6	; 0x06
 494:	80 83       	st	Z, r24
 496:	3b c0       	rjmp	.+118    	; 0x50e <DIO_u8GetPinValue+0x11a>
				break;
			case 1:
				*Pu8Value=get_bit(DIO_U8_PINB->ByteAccess ,u8PIN_ID);
 498:	e6 e3       	ldi	r30, 0x36	; 54
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	a9 01       	movw	r20, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_u8GetPinValue+0xbc>
 4ac:	55 95       	asr	r21
 4ae:	47 95       	ror	r20
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_u8GetPinValue+0xb8>
 4b4:	ca 01       	movw	r24, r20
 4b6:	81 70       	andi	r24, 0x01	; 1
 4b8:	ed 81       	ldd	r30, Y+5	; 0x05
 4ba:	fe 81       	ldd	r31, Y+6	; 0x06
 4bc:	80 83       	st	Z, r24
 4be:	27 c0       	rjmp	.+78     	; 0x50e <DIO_u8GetPinValue+0x11a>
				break;
			case 2:
				*Pu8Value=get_bit(DIO_U8_PINC->ByteAccess ,u8PIN_ID);
 4c0:	e3 e3       	ldi	r30, 0x33	; 51
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	a9 01       	movw	r20, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8GetPinValue+0xe4>
 4d4:	55 95       	asr	r21
 4d6:	47 95       	ror	r20
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8GetPinValue+0xe0>
 4dc:	ca 01       	movw	r24, r20
 4de:	81 70       	andi	r24, 0x01	; 1
 4e0:	ed 81       	ldd	r30, Y+5	; 0x05
 4e2:	fe 81       	ldd	r31, Y+6	; 0x06
 4e4:	80 83       	st	Z, r24
 4e6:	13 c0       	rjmp	.+38     	; 0x50e <DIO_u8GetPinValue+0x11a>
				break;
			case 3:
				*Pu8Value=get_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 4e8:	e0 e3       	ldi	r30, 0x30	; 48
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a9 01       	movw	r20, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_u8GetPinValue+0x10c>
 4fc:	55 95       	asr	r21
 4fe:	47 95       	ror	r20
 500:	8a 95       	dec	r24
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_u8GetPinValue+0x108>
 504:	ca 01       	movw	r24, r20
 506:	81 70       	andi	r24, 0x01	; 1
 508:	ed 81       	ldd	r30, Y+5	; 0x05
 50a:	fe 81       	ldd	r31, Y+6	; 0x06
 50c:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
 510:	28 96       	adiw	r28, 0x08	; 8
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	08 95       	ret

00000522 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 u8PortNB, u8 u8Direction){
 522:	df 93       	push	r29
 524:	cf 93       	push	r28
 526:	00 d0       	rcall	.+0      	; 0x528 <DIO_u8SetPortDirection+0x6>
 528:	00 d0       	rcall	.+0      	; 0x52a <DIO_u8SetPortDirection+0x8>
 52a:	0f 92       	push	r0
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
 530:	8a 83       	std	Y+2, r24	; 0x02
 532:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 534:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	84 30       	cpi	r24, 0x04	; 4
 53a:	18 f0       	brcs	.+6      	; 0x542 <DIO_u8SetPortDirection+0x20>
			u8ErrorState =1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	33 c0       	rjmp	.+102    	; 0x5a8 <DIO_u8SetPortDirection+0x86>
		}
		else{
			u8ErrorState =0 ;
 542:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	3d 83       	std	Y+5, r19	; 0x05
 54c:	2c 83       	std	Y+4, r18	; 0x04
 54e:	8c 81       	ldd	r24, Y+4	; 0x04
 550:	9d 81       	ldd	r25, Y+5	; 0x05
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	91 05       	cpc	r25, r1
 556:	d1 f0       	breq	.+52     	; 0x58c <DIO_u8SetPortDirection+0x6a>
 558:	2c 81       	ldd	r18, Y+4	; 0x04
 55a:	3d 81       	ldd	r19, Y+5	; 0x05
 55c:	22 30       	cpi	r18, 0x02	; 2
 55e:	31 05       	cpc	r19, r1
 560:	2c f4       	brge	.+10     	; 0x56c <DIO_u8SetPortDirection+0x4a>
 562:	8c 81       	ldd	r24, Y+4	; 0x04
 564:	9d 81       	ldd	r25, Y+5	; 0x05
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	61 f0       	breq	.+24     	; 0x582 <DIO_u8SetPortDirection+0x60>
 56a:	1e c0       	rjmp	.+60     	; 0x5a8 <DIO_u8SetPortDirection+0x86>
 56c:	2c 81       	ldd	r18, Y+4	; 0x04
 56e:	3d 81       	ldd	r19, Y+5	; 0x05
 570:	22 30       	cpi	r18, 0x02	; 2
 572:	31 05       	cpc	r19, r1
 574:	81 f0       	breq	.+32     	; 0x596 <DIO_u8SetPortDirection+0x74>
 576:	8c 81       	ldd	r24, Y+4	; 0x04
 578:	9d 81       	ldd	r25, Y+5	; 0x05
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	91 05       	cpc	r25, r1
 57e:	81 f0       	breq	.+32     	; 0x5a0 <DIO_u8SetPortDirection+0x7e>
 580:	13 c0       	rjmp	.+38     	; 0x5a8 <DIO_u8SetPortDirection+0x86>
			case 0:
				DIO_U8_DDRA->ByteAccess =u8Direction;
 582:	ea e3       	ldi	r30, 0x3A	; 58
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	80 83       	st	Z, r24
 58a:	0e c0       	rjmp	.+28     	; 0x5a8 <DIO_u8SetPortDirection+0x86>
				break;
			case 1:
				DIO_U8_DDRB->ByteAccess=u8Direction;
 58c:	e7 e3       	ldi	r30, 0x37	; 55
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	80 83       	st	Z, r24
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <DIO_u8SetPortDirection+0x86>
				break;

			case 2:
				DIO_U8_DDRC->ByteAccess=u8Direction;
 596:	e4 e3       	ldi	r30, 0x34	; 52
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	80 83       	st	Z, r24
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <DIO_u8SetPortDirection+0x86>
				break;
			case 3:
				DIO_U8_DDRD-> ByteAccess=u8Direction;
 5a0:	e1 e3       	ldi	r30, 0x31	; 49
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	80 83       	st	Z, r24
			default :
				break;
			}
		}
		/*Function return */
		return u8ErrorState;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
	}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	cf 91       	pop	r28
 5b6:	df 91       	pop	r29
 5b8:	08 95       	ret

000005ba <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 u8PortNB, u8 u8Value){
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <DIO_u8SetPortValue+0x6>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <DIO_u8SetPortValue+0x8>
 5c2:	0f 92       	push	r0
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 5cc:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	84 30       	cpi	r24, 0x04	; 4
 5d2:	18 f0       	brcs	.+6      	; 0x5da <DIO_u8SetPortValue+0x20>
			u8ErrorState =1;
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	89 83       	std	Y+1, r24	; 0x01
 5d8:	33 c0       	rjmp	.+102    	; 0x640 <DIO_u8SetPortValue+0x86>
		}
		else{
			u8ErrorState =0 ;
 5da:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	3d 83       	std	Y+5, r19	; 0x05
 5e4:	2c 83       	std	Y+4, r18	; 0x04
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	91 05       	cpc	r25, r1
 5ee:	d1 f0       	breq	.+52     	; 0x624 <DIO_u8SetPortValue+0x6a>
 5f0:	2c 81       	ldd	r18, Y+4	; 0x04
 5f2:	3d 81       	ldd	r19, Y+5	; 0x05
 5f4:	22 30       	cpi	r18, 0x02	; 2
 5f6:	31 05       	cpc	r19, r1
 5f8:	2c f4       	brge	.+10     	; 0x604 <DIO_u8SetPortValue+0x4a>
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	9d 81       	ldd	r25, Y+5	; 0x05
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	61 f0       	breq	.+24     	; 0x61a <DIO_u8SetPortValue+0x60>
 602:	1e c0       	rjmp	.+60     	; 0x640 <DIO_u8SetPortValue+0x86>
 604:	2c 81       	ldd	r18, Y+4	; 0x04
 606:	3d 81       	ldd	r19, Y+5	; 0x05
 608:	22 30       	cpi	r18, 0x02	; 2
 60a:	31 05       	cpc	r19, r1
 60c:	81 f0       	breq	.+32     	; 0x62e <DIO_u8SetPortValue+0x74>
 60e:	8c 81       	ldd	r24, Y+4	; 0x04
 610:	9d 81       	ldd	r25, Y+5	; 0x05
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	91 05       	cpc	r25, r1
 616:	81 f0       	breq	.+32     	; 0x638 <DIO_u8SetPortValue+0x7e>
 618:	13 c0       	rjmp	.+38     	; 0x640 <DIO_u8SetPortValue+0x86>
			case 0:
				DIO_U8_PORTA->ByteAccess =u8Value;
 61a:	eb e3       	ldi	r30, 0x3B	; 59
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	80 83       	st	Z, r24
 622:	0e c0       	rjmp	.+28     	; 0x640 <DIO_u8SetPortValue+0x86>
				break;
			case 1:
				DIO_U8_PORTB->ByteAccess=u8Value;
 624:	e8 e3       	ldi	r30, 0x38	; 56
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	80 83       	st	Z, r24
 62c:	09 c0       	rjmp	.+18     	; 0x640 <DIO_u8SetPortValue+0x86>
				break;
			case 2:
				DIO_U8_PORTC->ByteAccess =u8Value;
 62e:	e5 e3       	ldi	r30, 0x35	; 53
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	80 83       	st	Z, r24
 636:	04 c0       	rjmp	.+8      	; 0x640 <DIO_u8SetPortValue+0x86>
				break;
			case 3:
				DIO_U8_PORTD-> ByteAccess=u8Value;
 638:	e2 e3       	ldi	r30, 0x32	; 50
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 640:	89 81       	ldd	r24, Y+1	; 0x01
	}
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	08 95       	ret

00000652 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 u8PortNB, u8* Pu8Value){
 652:	df 93       	push	r29
 654:	cf 93       	push	r28
 656:	00 d0       	rcall	.+0      	; 0x658 <DIO_u8GetPortValue+0x6>
 658:	00 d0       	rcall	.+0      	; 0x65a <DIO_u8GetPortValue+0x8>
 65a:	00 d0       	rcall	.+0      	; 0x65c <DIO_u8GetPortValue+0xa>
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	8a 83       	std	Y+2, r24	; 0x02
 662:	7c 83       	std	Y+4, r23	; 0x04
 664:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
			u8 u8ErrorState =0;
 666:	19 82       	std	Y+1, r1	; 0x01


			/*validate Input*/
			if (u8PortNB >=  DIO_MAXPORTNB){
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	84 30       	cpi	r24, 0x04	; 4
 66c:	18 f0       	brcs	.+6      	; 0x674 <DIO_u8GetPortValue+0x22>
				u8ErrorState =1;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	89 83       	std	Y+1, r24	; 0x01
 672:	3b c0       	rjmp	.+118    	; 0x6ea <DIO_u8GetPortValue+0x98>
			}
			else{
				u8ErrorState =0 ;
 674:	19 82       	std	Y+1, r1	; 0x01

				switch (u8PortNB){
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	3e 83       	std	Y+6, r19	; 0x06
 67e:	2d 83       	std	Y+5, r18	; 0x05
 680:	8d 81       	ldd	r24, Y+5	; 0x05
 682:	9e 81       	ldd	r25, Y+6	; 0x06
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	91 05       	cpc	r25, r1
 688:	e1 f0       	breq	.+56     	; 0x6c2 <DIO_u8GetPortValue+0x70>
 68a:	2d 81       	ldd	r18, Y+5	; 0x05
 68c:	3e 81       	ldd	r19, Y+6	; 0x06
 68e:	22 30       	cpi	r18, 0x02	; 2
 690:	31 05       	cpc	r19, r1
 692:	2c f4       	brge	.+10     	; 0x69e <DIO_u8GetPortValue+0x4c>
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	9e 81       	ldd	r25, Y+6	; 0x06
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	61 f0       	breq	.+24     	; 0x6b4 <DIO_u8GetPortValue+0x62>
 69c:	26 c0       	rjmp	.+76     	; 0x6ea <DIO_u8GetPortValue+0x98>
 69e:	2d 81       	ldd	r18, Y+5	; 0x05
 6a0:	3e 81       	ldd	r19, Y+6	; 0x06
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	a1 f0       	breq	.+40     	; 0x6d0 <DIO_u8GetPortValue+0x7e>
 6a8:	8d 81       	ldd	r24, Y+5	; 0x05
 6aa:	9e 81       	ldd	r25, Y+6	; 0x06
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	91 05       	cpc	r25, r1
 6b0:	b1 f0       	breq	.+44     	; 0x6de <DIO_u8GetPortValue+0x8c>
 6b2:	1b c0       	rjmp	.+54     	; 0x6ea <DIO_u8GetPortValue+0x98>
				case 0:
					*Pu8Value =DIO_U8_PINA->ByteAccess;
 6b4:	e9 e3       	ldi	r30, 0x39	; 57
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	eb 81       	ldd	r30, Y+3	; 0x03
 6bc:	fc 81       	ldd	r31, Y+4	; 0x04
 6be:	80 83       	st	Z, r24
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <DIO_u8GetPortValue+0x98>
					break;
				case 1:
					*Pu8Value=DIO_U8_PINB->ByteAccess;
 6c2:	e6 e3       	ldi	r30, 0x36	; 54
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	eb 81       	ldd	r30, Y+3	; 0x03
 6ca:	fc 81       	ldd	r31, Y+4	; 0x04
 6cc:	80 83       	st	Z, r24
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <DIO_u8GetPortValue+0x98>
					break;
				case 2:
					*Pu8Value=DIO_U8_PINC->ByteAccess;
 6d0:	e3 e3       	ldi	r30, 0x33	; 51
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	eb 81       	ldd	r30, Y+3	; 0x03
 6d8:	fc 81       	ldd	r31, Y+4	; 0x04
 6da:	80 83       	st	Z, r24
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <DIO_u8GetPortValue+0x98>
					break;
				case 3:
					*Pu8Value=DIO_U8_PIND->ByteAccess;
 6de:	e0 e3       	ldi	r30, 0x30	; 48
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	eb 81       	ldd	r30, Y+3	; 0x03
 6e6:	fc 81       	ldd	r31, Y+4	; 0x04
 6e8:	80 83       	st	Z, r24
					break;

				}
			}
			/*Function return */
			return u8ErrorState;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
		}
 6ec:	26 96       	adiw	r28, 0x06	; 6
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <DIO_u8SetPortPushUp>:
u8 DIO_u8SetPortPushUp(u8 u8PortNB,u8 u8Value){
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	00 d0       	rcall	.+0      	; 0x704 <DIO_u8SetPortPushUp+0x6>
 704:	00 d0       	rcall	.+0      	; 0x706 <DIO_u8SetPortPushUp+0x8>
 706:	0f 92       	push	r0
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	8a 83       	std	Y+2, r24	; 0x02
 70e:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 710:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 712:	8a 81       	ldd	r24, Y+2	; 0x02
 714:	84 30       	cpi	r24, 0x04	; 4
 716:	18 f0       	brcs	.+6      	; 0x71e <DIO_u8SetPortPushUp+0x20>
			u8ErrorState =1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	43 c0       	rjmp	.+134    	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
		}
		else{
			u8ErrorState =0 ;
 71e:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3d 83       	std	Y+5, r19	; 0x05
 728:	2c 83       	std	Y+4, r18	; 0x04
 72a:	8c 81       	ldd	r24, Y+4	; 0x04
 72c:	9d 81       	ldd	r25, Y+5	; 0x05
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	91 05       	cpc	r25, r1
 732:	f1 f0       	breq	.+60     	; 0x770 <DIO_u8SetPortPushUp+0x72>
 734:	2c 81       	ldd	r18, Y+4	; 0x04
 736:	3d 81       	ldd	r19, Y+5	; 0x05
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	31 05       	cpc	r19, r1
 73c:	2c f4       	brge	.+10     	; 0x748 <DIO_u8SetPortPushUp+0x4a>
 73e:	8c 81       	ldd	r24, Y+4	; 0x04
 740:	9d 81       	ldd	r25, Y+5	; 0x05
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	61 f0       	breq	.+24     	; 0x75e <DIO_u8SetPortPushUp+0x60>
 746:	2e c0       	rjmp	.+92     	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
 748:	2c 81       	ldd	r18, Y+4	; 0x04
 74a:	3d 81       	ldd	r19, Y+5	; 0x05
 74c:	22 30       	cpi	r18, 0x02	; 2
 74e:	31 05       	cpc	r19, r1
 750:	c1 f0       	breq	.+48     	; 0x782 <DIO_u8SetPortPushUp+0x84>
 752:	8c 81       	ldd	r24, Y+4	; 0x04
 754:	9d 81       	ldd	r25, Y+5	; 0x05
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	91 05       	cpc	r25, r1
 75a:	e1 f0       	breq	.+56     	; 0x794 <DIO_u8SetPortPushUp+0x96>
 75c:	23 c0       	rjmp	.+70     	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
			case 0:
				DIO_u8SetPortDirection(DIO_U8_PORTA,u8Value);
 75e:	8b e3       	ldi	r24, 0x3B	; 59
 760:	6b 81       	ldd	r22, Y+3	; 0x03
 762:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8SetPortDirection>
				DIO_U8_PORTA->ByteAccess =u8Value;
 766:	eb e3       	ldi	r30, 0x3B	; 59
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	80 83       	st	Z, r24
 76e:	1a c0       	rjmp	.+52     	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
				break;
			case 1:
				DIO_u8SetPortDirection(DIO_U8_PORTB,u8Value);
 770:	88 e3       	ldi	r24, 0x38	; 56
 772:	6b 81       	ldd	r22, Y+3	; 0x03
 774:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8SetPortDirection>
				DIO_U8_PORTB->ByteAccess=u8Value;
 778:	e8 e3       	ldi	r30, 0x38	; 56
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	80 83       	st	Z, r24
 780:	11 c0       	rjmp	.+34     	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
				break;
			case 2:
				DIO_u8SetPortDirection(DIO_U8_PORTC,u8Value);
 782:	85 e3       	ldi	r24, 0x35	; 53
 784:	6b 81       	ldd	r22, Y+3	; 0x03
 786:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8SetPortDirection>
				DIO_U8_PORTC->ByteAccess =u8Value;
 78a:	e5 e3       	ldi	r30, 0x35	; 53
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	80 83       	st	Z, r24
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <DIO_u8SetPortPushUp+0xa6>
				break;
			case 3:
				DIO_u8SetPortDirection(DIO_U8_PORTD,u8Value);
 794:	82 e3       	ldi	r24, 0x32	; 50
 796:	6b 81       	ldd	r22, Y+3	; 0x03
 798:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8SetPortDirection>
				DIO_U8_PORTD-> ByteAccess=u8Value;
 79c:	e2 e3       	ldi	r30, 0x32	; 50
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
	}
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	cf 91       	pop	r28
 7b2:	df 91       	pop	r29
 7b4:	08 95       	ret

000007b6 <DIO_u8SetPinPushUp>:
u8 DIO_u8SetPinPushUp(u8 u8PinNB){
 7b6:	df 93       	push	r29
 7b8:	cf 93       	push	r28
 7ba:	00 d0       	rcall	.+0      	; 0x7bc <DIO_u8SetPinPushUp+0x6>
 7bc:	00 d0       	rcall	.+0      	; 0x7be <DIO_u8SetPinPushUp+0x8>
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <DIO_u8SetPinPushUp+0xa>
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	8c 83       	std	Y+4, r24	; 0x04
	/*Local variable*/
	u8 u8ErrorState =0;
 7c6:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 7c8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ca:	80 32       	cpi	r24, 0x20	; 32
 7cc:	18 f0       	brcs	.+6      	; 0x7d4 <DIO_u8SetPinPushUp+0x1e>
		u8ErrorState =1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	8b 83       	std	Y+3, r24	; 0x03
 7d2:	c6 c0       	rjmp	.+396    	; 0x960 <__stack+0x101>
	}
	else{
		u8ErrorState =0 ;
 7d4:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 7d6:	8c 81       	ldd	r24, Y+4	; 0x04
 7d8:	86 95       	lsr	r24
 7da:	86 95       	lsr	r24
 7dc:	86 95       	lsr	r24
 7de:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 7e0:	8c 81       	ldd	r24, Y+4	; 0x04
 7e2:	87 70       	andi	r24, 0x07	; 7
 7e4:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	3e 83       	std	Y+6, r19	; 0x06
 7ee:	2d 83       	std	Y+5, r18	; 0x05
 7f0:	8d 81       	ldd	r24, Y+5	; 0x05
 7f2:	9e 81       	ldd	r25, Y+6	; 0x06
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	91 05       	cpc	r25, r1
 7f8:	09 f4       	brne	.+2      	; 0x7fc <DIO_u8SetPinPushUp+0x46>
 7fa:	3e c0       	rjmp	.+124    	; 0x878 <__stack+0x19>
 7fc:	2d 81       	ldd	r18, Y+5	; 0x05
 7fe:	3e 81       	ldd	r19, Y+6	; 0x06
 800:	22 30       	cpi	r18, 0x02	; 2
 802:	31 05       	cpc	r19, r1
 804:	2c f4       	brge	.+10     	; 0x810 <DIO_u8SetPinPushUp+0x5a>
 806:	8d 81       	ldd	r24, Y+5	; 0x05
 808:	9e 81       	ldd	r25, Y+6	; 0x06
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	71 f0       	breq	.+28     	; 0x82a <DIO_u8SetPinPushUp+0x74>
 80e:	a8 c0       	rjmp	.+336    	; 0x960 <__stack+0x101>
 810:	2d 81       	ldd	r18, Y+5	; 0x05
 812:	3e 81       	ldd	r19, Y+6	; 0x06
 814:	22 30       	cpi	r18, 0x02	; 2
 816:	31 05       	cpc	r19, r1
 818:	09 f4       	brne	.+2      	; 0x81c <DIO_u8SetPinPushUp+0x66>
 81a:	55 c0       	rjmp	.+170    	; 0x8c6 <__stack+0x67>
 81c:	8d 81       	ldd	r24, Y+5	; 0x05
 81e:	9e 81       	ldd	r25, Y+6	; 0x06
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	91 05       	cpc	r25, r1
 824:	09 f4       	brne	.+2      	; 0x828 <DIO_u8SetPinPushUp+0x72>
 826:	76 c0       	rjmp	.+236    	; 0x914 <__stack+0xb5>
 828:	9b c0       	rjmp	.+310    	; 0x960 <__stack+0x101>
		case 0:
			clr_bit(DIO_U8_PINA->ByteAccess,u8PIN_ID);
 82a:	a9 e3       	ldi	r26, 0x39	; 57
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	e9 e3       	ldi	r30, 0x39	; 57
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	48 2f       	mov	r20, r24
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_u8SetPinPushUp+0x90>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	2a 95       	dec	r18
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_u8SetPinPushUp+0x8c>
 84a:	80 95       	com	r24
 84c:	84 23       	and	r24, r20
 84e:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTA->ByteAccess,u8PIN_ID);
 850:	ab e3       	ldi	r26, 0x3B	; 59
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	eb e3       	ldi	r30, 0x3B	; 59
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	48 2f       	mov	r20, r24
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	28 2f       	mov	r18, r24
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 2e       	mov	r0, r18
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	0a 94       	dec	r0
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	84 2b       	or	r24, r20
 874:	8c 93       	st	X, r24
 876:	74 c0       	rjmp	.+232    	; 0x960 <__stack+0x101>
			break;
		case 1:
			clr_bit(DIO_U8_PINB->ByteAccess,u8PIN_ID);
 878:	a6 e3       	ldi	r26, 0x36	; 54
 87a:	b0 e0       	ldi	r27, 0x00	; 0
 87c:	e6 e3       	ldi	r30, 0x36	; 54
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	48 2f       	mov	r20, r24
 884:	89 81       	ldd	r24, Y+1	; 0x01
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	2a 95       	dec	r18
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	80 95       	com	r24
 89a:	84 23       	and	r24, r20
 89c:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTB->ByteAccess,u8PIN_ID);
 89e:	a8 e3       	ldi	r26, 0x38	; 56
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e8 e3       	ldi	r30, 0x38	; 56
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	48 2f       	mov	r20, r24
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	28 2f       	mov	r18, r24
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 2e       	mov	r0, r18
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	0a 94       	dec	r0
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	84 2b       	or	r24, r20
 8c2:	8c 93       	st	X, r24
 8c4:	4d c0       	rjmp	.+154    	; 0x960 <__stack+0x101>
			break;
		case 2:
			clr_bit(DIO_U8_PINC->ByteAccess,u8PIN_ID);
 8c6:	a3 e3       	ldi	r26, 0x33	; 51
 8c8:	b0 e0       	ldi	r27, 0x00	; 0
 8ca:	e3 e3       	ldi	r30, 0x33	; 51
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	48 2f       	mov	r20, r24
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	28 2f       	mov	r18, r24
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	2a 95       	dec	r18
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
 8e6:	80 95       	com	r24
 8e8:	84 23       	and	r24, r20
 8ea:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTC->ByteAccess,u8PIN_ID);
 8ec:	a5 e3       	ldi	r26, 0x35	; 53
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e5 e3       	ldi	r30, 0x35	; 53
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	48 2f       	mov	r20, r24
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 2e       	mov	r0, r18
 904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	0a 94       	dec	r0
 90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
 90e:	84 2b       	or	r24, r20
 910:	8c 93       	st	X, r24
 912:	26 c0       	rjmp	.+76     	; 0x960 <__stack+0x101>
			break;
		case 3:
			clr_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 914:	a0 e3       	ldi	r26, 0x30	; 48
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	e0 e3       	ldi	r30, 0x30	; 48
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	48 2f       	mov	r20, r24
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	2a 95       	dec	r18
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	80 95       	com	r24
 936:	84 23       	and	r24, r20
 938:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTD->ByteAccess,u8PIN_ID);
 93a:	a2 e3       	ldi	r26, 0x32	; 50
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e2 e3       	ldi	r30, 0x32	; 50
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	48 2f       	mov	r20, r24
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 2e       	mov	r0, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0xf9>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	0a 94       	dec	r0
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0xf5>
 95c:	84 2b       	or	r24, r20
 95e:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 960:	8b 81       	ldd	r24, Y+3	; 0x03
}
 962:	26 96       	adiw	r28, 0x06	; 6
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	de bf       	out	0x3e, r29	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	cd bf       	out	0x3d, r28	; 61
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <delay_ms>:
 *      Author: Hanna Nabil
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
 97c:	28 97       	sbiw	r28, 0x08	; 8
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	de bf       	out	0x3e, r29	; 62
 984:	0f be       	out	0x3f, r0	; 63
 986:	cd bf       	out	0x3d, r28	; 61
 988:	6d 83       	std	Y+5, r22	; 0x05
 98a:	7e 83       	std	Y+6, r23	; 0x06
 98c:	8f 83       	std	Y+7, r24	; 0x07
 98e:	98 87       	std	Y+8, r25	; 0x08
	for (u32 i =0 ; i< value*150;i++){
 990:	19 82       	std	Y+1, r1	; 0x01
 992:	1a 82       	std	Y+2, r1	; 0x02
 994:	1b 82       	std	Y+3, r1	; 0x03
 996:	1c 82       	std	Y+4, r1	; 0x04
 998:	0c c0       	rjmp	.+24     	; 0x9b2 <delay_ms+0x3e>
		asm("NOP");
 99a:	00 00       	nop
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
	for (u32 i =0 ; i< value*150;i++){
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	9a 81       	ldd	r25, Y+2	; 0x02
 9a0:	ab 81       	ldd	r26, Y+3	; 0x03
 9a2:	bc 81       	ldd	r27, Y+4	; 0x04
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	a1 1d       	adc	r26, r1
 9a8:	b1 1d       	adc	r27, r1
 9aa:	89 83       	std	Y+1, r24	; 0x01
 9ac:	9a 83       	std	Y+2, r25	; 0x02
 9ae:	ab 83       	std	Y+3, r26	; 0x03
 9b0:	bc 83       	std	Y+4, r27	; 0x04
 9b2:	8d 81       	ldd	r24, Y+5	; 0x05
 9b4:	9e 81       	ldd	r25, Y+6	; 0x06
 9b6:	af 81       	ldd	r26, Y+7	; 0x07
 9b8:	b8 85       	ldd	r27, Y+8	; 0x08
 9ba:	26 e9       	ldi	r18, 0x96	; 150
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	bc 01       	movw	r22, r24
 9c4:	cd 01       	movw	r24, r26
 9c6:	0e 94 36 05 	call	0xa6c	; 0xa6c <__mulsi3>
 9ca:	9b 01       	movw	r18, r22
 9cc:	ac 01       	movw	r20, r24
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	9a 81       	ldd	r25, Y+2	; 0x02
 9d2:	ab 81       	ldd	r26, Y+3	; 0x03
 9d4:	bc 81       	ldd	r27, Y+4	; 0x04
 9d6:	82 17       	cp	r24, r18
 9d8:	93 07       	cpc	r25, r19
 9da:	a4 07       	cpc	r26, r20
 9dc:	b5 07       	cpc	r27, r21
 9de:	e8 f2       	brcs	.-70     	; 0x99a <delay_ms+0x26>
		asm("NOP");
	}
}
 9e0:	28 96       	adiw	r28, 0x08	; 8
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	cf 91       	pop	r28
 9ee:	df 91       	pop	r29
 9f0:	08 95       	ret

000009f2 <main>:
int main (void){
 9f2:	df 93       	push	r29
 9f4:	cf 93       	push	r28
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
	//DIO_voidInitialize();
	DIO_u8SetPinDirection(0,1);
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	61 e0       	ldi	r22, 0x01	; 1
 9fe:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(1,1);
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(3,0b11111111);
 a0a:	83 e0       	ldi	r24, 0x03	; 3
 a0c:	6f ef       	ldi	r22, 0xFF	; 255
 a0e:	0e 94 91 02 	call	0x522	; 0x522 <DIO_u8SetPortDirection>

	DIO_u8SetPinValue(0,0);//Enable screen1
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	60 e0       	ldi	r22, 0x00	; 0
 a16:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(1,1);//Enable screen2
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	61 e0       	ldi	r22, 0x01	; 1
 a1e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
	//LEDDriver_u8Enable();
	while(1){



		DIO_u8SetPinValue(1,0);//disable screen2
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(3,0b11101111);
 a2a:	83 e0       	ldi	r24, 0x03	; 3
 a2c:	6f ee       	ldi	r22, 0xEF	; 239
 a2e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_u8SetPortValue>
		DIO_u8SetPinValue(0,0);//Enable screen1
 a32:	80 e0       	ldi	r24, 0x00	; 0
 a34:	60 e0       	ldi	r22, 0x00	; 0
 a36:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
		delay_ms(100);
 a3a:	64 e6       	ldi	r22, 0x64	; 100
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 ba 04 	call	0x974	; 0x974 <delay_ms>

		DIO_u8SetPinValue(0,1);//disable screen1
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(3,0b00010010);
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	62 e1       	ldi	r22, 0x12	; 18
 a52:	0e 94 dd 02 	call	0x5ba	; 0x5ba <DIO_u8SetPortValue>
		DIO_u8SetPinValue(1,1);//Enable screen2
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_u8SetPinValue>
		delay_ms(100);
 a5e:	64 e6       	ldi	r22, 0x64	; 100
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 ba 04 	call	0x974	; 0x974 <delay_ms>
 a6a:	db cf       	rjmp	.-74     	; 0xa22 <main+0x30>

00000a6c <__mulsi3>:
 a6c:	62 9f       	mul	r22, r18
 a6e:	d0 01       	movw	r26, r0
 a70:	73 9f       	mul	r23, r19
 a72:	f0 01       	movw	r30, r0
 a74:	82 9f       	mul	r24, r18
 a76:	e0 0d       	add	r30, r0
 a78:	f1 1d       	adc	r31, r1
 a7a:	64 9f       	mul	r22, r20
 a7c:	e0 0d       	add	r30, r0
 a7e:	f1 1d       	adc	r31, r1
 a80:	92 9f       	mul	r25, r18
 a82:	f0 0d       	add	r31, r0
 a84:	83 9f       	mul	r24, r19
 a86:	f0 0d       	add	r31, r0
 a88:	74 9f       	mul	r23, r20
 a8a:	f0 0d       	add	r31, r0
 a8c:	65 9f       	mul	r22, r21
 a8e:	f0 0d       	add	r31, r0
 a90:	99 27       	eor	r25, r25
 a92:	72 9f       	mul	r23, r18
 a94:	b0 0d       	add	r27, r0
 a96:	e1 1d       	adc	r30, r1
 a98:	f9 1f       	adc	r31, r25
 a9a:	63 9f       	mul	r22, r19
 a9c:	b0 0d       	add	r27, r0
 a9e:	e1 1d       	adc	r30, r1
 aa0:	f9 1f       	adc	r31, r25
 aa2:	bd 01       	movw	r22, r26
 aa4:	cf 01       	movw	r24, r30
 aa6:	11 24       	eor	r1, r1
 aa8:	08 95       	ret

00000aaa <_exit>:
 aaa:	f8 94       	cli

00000aac <__stop_program>:
 aac:	ff cf       	rjmp	.-2      	; 0xaac <__stop_program>
