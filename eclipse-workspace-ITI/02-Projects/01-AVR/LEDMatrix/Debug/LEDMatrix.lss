
LEDMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000b08  00000b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000e70  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000847  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3d 05 	call	0xa7a	; 0xa7a <main>
  7a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInitialize>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
  98:	e4 e3       	ldi	r30, 0x34	; 52
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
  9e:	e1 e3       	ldi	r30, 0x31	; 49
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	08 95       	ret

000000aa <DIO_u8SetPinDirection>:
										DIO_U8_PIN30_DIR,
										DIO_U8_PIN31_DIR);
								
}

u8 DIO_u8SetPinDirection(u8 u8PinNB, u8 u8Direction) {
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	27 97       	sbiw	r28, 0x07	; 7
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	8c 83       	std	Y+4, r24	; 0x04
  c0:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
  c2:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
  c4:	8c 81       	ldd	r24, Y+4	; 0x04
  c6:	80 32       	cpi	r24, 0x20	; 32
  c8:	18 f0       	brcs	.+6      	; 0xd0 <DIO_u8SetPinDirection+0x26>
		u8ErrorState =1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	8b 83       	std	Y+3, r24	; 0x03
  ce:	bb c0       	rjmp	.+374    	; 0x246 <DIO_u8SetPinDirection+0x19c>
	}else if ((u8Direction != DIO_U8_INPUT ) && (u8Direction != DIO_U8_OUTPUT)){
  d0:	8d 81       	ldd	r24, Y+5	; 0x05
  d2:	88 23       	and	r24, r24
  d4:	31 f0       	breq	.+12     	; 0xe2 <DIO_u8SetPinDirection+0x38>
  d6:	8d 81       	ldd	r24, Y+5	; 0x05
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	19 f0       	breq	.+6      	; 0xe2 <DIO_u8SetPinDirection+0x38>
		u8ErrorState =1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8b 83       	std	Y+3, r24	; 0x03
  e0:	b2 c0       	rjmp	.+356    	; 0x246 <DIO_u8SetPinDirection+0x19c>
	}
	else{
		u8ErrorState =0 ;
  e2:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
  ee:	8c 81       	ldd	r24, Y+4	; 0x04
  f0:	87 70       	andi	r24, 0x07	; 7
  f2:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	3f 83       	std	Y+7, r19	; 0x07
  fc:	2e 83       	std	Y+6, r18	; 0x06
  fe:	6e 81       	ldd	r22, Y+6	; 0x06
 100:	7f 81       	ldd	r23, Y+7	; 0x07
 102:	61 30       	cpi	r22, 0x01	; 1
 104:	71 05       	cpc	r23, r1
 106:	d1 f1       	breq	.+116    	; 0x17c <DIO_u8SetPinDirection+0xd2>
 108:	8e 81       	ldd	r24, Y+6	; 0x06
 10a:	9f 81       	ldd	r25, Y+7	; 0x07
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	91 05       	cpc	r25, r1
 110:	34 f4       	brge	.+12     	; 0x11e <DIO_u8SetPinDirection+0x74>
 112:	2e 81       	ldd	r18, Y+6	; 0x06
 114:	3f 81       	ldd	r19, Y+7	; 0x07
 116:	21 15       	cp	r18, r1
 118:	31 05       	cpc	r19, r1
 11a:	71 f0       	breq	.+28     	; 0x138 <DIO_u8SetPinDirection+0x8e>
 11c:	94 c0       	rjmp	.+296    	; 0x246 <DIO_u8SetPinDirection+0x19c>
 11e:	6e 81       	ldd	r22, Y+6	; 0x06
 120:	7f 81       	ldd	r23, Y+7	; 0x07
 122:	62 30       	cpi	r22, 0x02	; 2
 124:	71 05       	cpc	r23, r1
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_u8SetPinDirection+0x80>
 128:	4b c0       	rjmp	.+150    	; 0x1c0 <DIO_u8SetPinDirection+0x116>
 12a:	8e 81       	ldd	r24, Y+6	; 0x06
 12c:	9f 81       	ldd	r25, Y+7	; 0x07
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	91 05       	cpc	r25, r1
 132:	09 f4       	brne	.+2      	; 0x136 <DIO_u8SetPinDirection+0x8c>
 134:	67 c0       	rjmp	.+206    	; 0x204 <DIO_u8SetPinDirection+0x15a>
 136:	87 c0       	rjmp	.+270    	; 0x246 <DIO_u8SetPinDirection+0x19c>
		case 0:
			assign_bit(DIO_U8_DDRA->ByteAccess ,u8PIN_ID,u8Direction);
 138:	aa e3       	ldi	r26, 0x3A	; 58
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ea e3       	ldi	r30, 0x3A	; 58
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinDirection+0xaa>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinDirection+0xa6>
 158:	80 95       	com	r24
 15a:	48 23       	and	r20, r24
 15c:	8d 81       	ldd	r24, Y+5	; 0x05
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	88 2f       	mov	r24, r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_u8SetPinDirection+0xc6>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_u8SetPinDirection+0xc2>
 174:	cb 01       	movw	r24, r22
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	65 c0       	rjmp	.+202    	; 0x246 <DIO_u8SetPinDirection+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_DDRB->ByteAccess ,u8PIN_ID,u8Direction);
 17c:	a7 e3       	ldi	r26, 0x37	; 55
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e7 e3       	ldi	r30, 0x37	; 55
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_u8SetPinDirection+0xee>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	2a 95       	dec	r18
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_u8SetPinDirection+0xea>
 19c:	80 95       	com	r24
 19e:	48 23       	and	r20, r24
 1a0:	8d 81       	ldd	r24, Y+5	; 0x05
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8SetPinDirection+0x10a>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8SetPinDirection+0x106>
 1b8:	cb 01       	movw	r24, r22
 1ba:	84 2b       	or	r24, r20
 1bc:	8c 93       	st	X, r24
 1be:	43 c0       	rjmp	.+134    	; 0x246 <DIO_u8SetPinDirection+0x19c>
			break;

		case 2:
			assign_bit(DIO_U8_DDRC->ByteAccess ,u8PIN_ID,u8Direction);
 1c0:	a4 e3       	ldi	r26, 0x34	; 52
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e4 e3       	ldi	r30, 0x34	; 52
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	48 2f       	mov	r20, r24
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_u8SetPinDirection+0x132>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	2a 95       	dec	r18
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_u8SetPinDirection+0x12e>
 1e0:	80 95       	com	r24
 1e2:	48 23       	and	r20, r24
 1e4:	8d 81       	ldd	r24, Y+5	; 0x05
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_u8SetPinDirection+0x14e>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_u8SetPinDirection+0x14a>
 1fc:	cb 01       	movw	r24, r22
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	21 c0       	rjmp	.+66     	; 0x246 <DIO_u8SetPinDirection+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_DDRD-> ByteAccess,u8PIN_ID,u8Direction);
 204:	a1 e3       	ldi	r26, 0x31	; 49
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e1 e3       	ldi	r30, 0x31	; 49
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinDirection+0x176>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinDirection+0x172>
 224:	80 95       	com	r24
 226:	48 23       	and	r20, r24
 228:	8d 81       	ldd	r24, Y+5	; 0x05
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8SetPinDirection+0x192>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8SetPinDirection+0x18e>
 240:	cb 01       	movw	r24, r22
 242:	84 2b       	or	r24, r20
 244:	8c 93       	st	X, r24
		default :
			break;
		}
	}
	/*Function return */
	return u8ErrorState;
 246:	8b 81       	ldd	r24, Y+3	; 0x03
}
 248:	27 96       	adiw	r28, 0x07	; 7
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 u8PinNB, u8 u8Value) {
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	27 97       	sbiw	r28, 0x07	; 7
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	8c 83       	std	Y+4, r24	; 0x04
 270:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
 272:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	18 f0       	brcs	.+6      	; 0x280 <DIO_u8SetPinValue+0x26>
		u8ErrorState =1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8b 83       	std	Y+3, r24	; 0x03
 27e:	bb c0       	rjmp	.+374    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
	}else if ((u8Value != DIO_U8_HIGH ) && (u8Value != DIO_U8_LOW)){
 280:	8d 81       	ldd	r24, Y+5	; 0x05
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	31 f0       	breq	.+12     	; 0x292 <DIO_u8SetPinValue+0x38>
 286:	8d 81       	ldd	r24, Y+5	; 0x05
 288:	88 23       	and	r24, r24
 28a:	19 f0       	breq	.+6      	; 0x292 <DIO_u8SetPinValue+0x38>
		u8ErrorState =1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8b 83       	std	Y+3, r24	; 0x03
 290:	b2 c0       	rjmp	.+356    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
	}
	else{
		u8ErrorState =0 ;
 292:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	86 95       	lsr	r24
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 29e:	8c 81       	ldd	r24, Y+4	; 0x04
 2a0:	87 70       	andi	r24, 0x07	; 7
 2a2:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	3f 83       	std	Y+7, r19	; 0x07
 2ac:	2e 83       	std	Y+6, r18	; 0x06
 2ae:	6e 81       	ldd	r22, Y+6	; 0x06
 2b0:	7f 81       	ldd	r23, Y+7	; 0x07
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	71 05       	cpc	r23, r1
 2b6:	d1 f1       	breq	.+116    	; 0x32c <DIO_u8SetPinValue+0xd2>
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	9f 81       	ldd	r25, Y+7	; 0x07
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	34 f4       	brge	.+12     	; 0x2ce <DIO_u8SetPinValue+0x74>
 2c2:	2e 81       	ldd	r18, Y+6	; 0x06
 2c4:	3f 81       	ldd	r19, Y+7	; 0x07
 2c6:	21 15       	cp	r18, r1
 2c8:	31 05       	cpc	r19, r1
 2ca:	71 f0       	breq	.+28     	; 0x2e8 <DIO_u8SetPinValue+0x8e>
 2cc:	94 c0       	rjmp	.+296    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
 2ce:	6e 81       	ldd	r22, Y+6	; 0x06
 2d0:	7f 81       	ldd	r23, Y+7	; 0x07
 2d2:	62 30       	cpi	r22, 0x02	; 2
 2d4:	71 05       	cpc	r23, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <DIO_u8SetPinValue+0x80>
 2d8:	4b c0       	rjmp	.+150    	; 0x370 <DIO_u8SetPinValue+0x116>
 2da:	8e 81       	ldd	r24, Y+6	; 0x06
 2dc:	9f 81       	ldd	r25, Y+7	; 0x07
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <DIO_u8SetPinValue+0x8c>
 2e4:	67 c0       	rjmp	.+206    	; 0x3b4 <DIO_u8SetPinValue+0x15a>
 2e6:	87 c0       	rjmp	.+270    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
		case 0:
			assign_bit(DIO_U8_PORTA->ByteAccess ,u8PIN_ID,u8Value);
 2e8:	ab e3       	ldi	r26, 0x3B	; 59
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	eb e3       	ldi	r30, 0x3B	; 59
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_u8SetPinValue+0xaa>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_u8SetPinValue+0xa6>
 308:	80 95       	com	r24
 30a:	48 23       	and	r20, r24
 30c:	8d 81       	ldd	r24, Y+5	; 0x05
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8SetPinValue+0xc6>
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8SetPinValue+0xc2>
 324:	cb 01       	movw	r24, r22
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	65 c0       	rjmp	.+202    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_PORTB->ByteAccess ,u8PIN_ID,u8Value);
 32c:	a8 e3       	ldi	r26, 0x38	; 56
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e8 e3       	ldi	r30, 0x38	; 56
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_u8SetPinValue+0xee>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	2a 95       	dec	r18
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_u8SetPinValue+0xea>
 34c:	80 95       	com	r24
 34e:	48 23       	and	r20, r24
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_u8SetPinValue+0x10a>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_u8SetPinValue+0x106>
 368:	cb 01       	movw	r24, r22
 36a:	84 2b       	or	r24, r20
 36c:	8c 93       	st	X, r24
 36e:	43 c0       	rjmp	.+134    	; 0x3f6 <DIO_u8SetPinValue+0x19c>
			break;
		case 2:
			assign_bit(DIO_U8_PORTC->ByteAccess ,u8PIN_ID,u8Value);
 370:	a5 e3       	ldi	r26, 0x35	; 53
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	e5 e3       	ldi	r30, 0x35	; 53
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8SetPinValue+0x132>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8SetPinValue+0x12e>
 390:	80 95       	com	r24
 392:	48 23       	and	r20, r24
 394:	8d 81       	ldd	r24, Y+5	; 0x05
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_u8SetPinValue+0x14e>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_u8SetPinValue+0x14a>
 3ac:	cb 01       	movw	r24, r22
 3ae:	84 2b       	or	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	21 c0       	rjmp	.+66     	; 0x3f6 <DIO_u8SetPinValue+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_PORTD-> ByteAccess,u8PIN_ID,u8Value);
 3b4:	a2 e3       	ldi	r26, 0x32	; 50
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e2 e3       	ldi	r30, 0x32	; 50
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8SetPinValue+0x176>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	2a 95       	dec	r18
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8SetPinValue+0x172>
 3d4:	80 95       	com	r24
 3d6:	48 23       	and	r20, r24
 3d8:	8d 81       	ldd	r24, Y+5	; 0x05
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0x192>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0x18e>
 3f0:	cb 01       	movw	r24, r22
 3f2:	84 2b       	or	r24, r20
 3f4:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 3f8:	27 96       	adiw	r28, 0x07	; 7
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 u8PinNB, u8* Pu8Value){
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	28 97       	sbiw	r28, 0x08	; 8
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	8c 83       	std	Y+4, r24	; 0x04
 420:	7e 83       	std	Y+6, r23	; 0x06
 422:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
		u8 u8ErrorState =0;
 424:	1b 82       	std	Y+3, r1	; 0x03
		u8 u8PORT_ID ,u8PIN_ID;

		/*validate Input*/
		if (u8PinNB >=  DIO_MAXPINNB){
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	80 32       	cpi	r24, 0x20	; 32
 42a:	18 f0       	brcs	.+6      	; 0x432 <DIO_u8GetPinValue+0x28>
			u8ErrorState =1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	8b 83       	std	Y+3, r24	; 0x03
 430:	79 c0       	rjmp	.+242    	; 0x524 <DIO_u8GetPinValue+0x11a>
		}
		else{
			u8ErrorState =0 ;
 432:	1b 82       	std	Y+3, r1	; 0x03
			u8PORT_ID = u8PinNB /PINS_PER_PORT;
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	86 95       	lsr	r24
 438:	86 95       	lsr	r24
 43a:	86 95       	lsr	r24
 43c:	8a 83       	std	Y+2, r24	; 0x02
			u8PIN_ID = u8PinNB % PINS_PER_PORT;
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	87 70       	andi	r24, 0x07	; 7
 442:	89 83       	std	Y+1, r24	; 0x01
			switch (u8PORT_ID){
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	38 87       	std	Y+8, r19	; 0x08
 44c:	2f 83       	std	Y+7, r18	; 0x07
 44e:	4f 81       	ldd	r20, Y+7	; 0x07
 450:	58 85       	ldd	r21, Y+8	; 0x08
 452:	41 30       	cpi	r20, 0x01	; 1
 454:	51 05       	cpc	r21, r1
 456:	59 f1       	breq	.+86     	; 0x4ae <DIO_u8GetPinValue+0xa4>
 458:	8f 81       	ldd	r24, Y+7	; 0x07
 45a:	98 85       	ldd	r25, Y+8	; 0x08
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	91 05       	cpc	r25, r1
 460:	34 f4       	brge	.+12     	; 0x46e <DIO_u8GetPinValue+0x64>
 462:	2f 81       	ldd	r18, Y+7	; 0x07
 464:	38 85       	ldd	r19, Y+8	; 0x08
 466:	21 15       	cp	r18, r1
 468:	31 05       	cpc	r19, r1
 46a:	69 f0       	breq	.+26     	; 0x486 <DIO_u8GetPinValue+0x7c>
 46c:	5b c0       	rjmp	.+182    	; 0x524 <DIO_u8GetPinValue+0x11a>
 46e:	4f 81       	ldd	r20, Y+7	; 0x07
 470:	58 85       	ldd	r21, Y+8	; 0x08
 472:	42 30       	cpi	r20, 0x02	; 2
 474:	51 05       	cpc	r21, r1
 476:	79 f1       	breq	.+94     	; 0x4d6 <DIO_u8GetPinValue+0xcc>
 478:	8f 81       	ldd	r24, Y+7	; 0x07
 47a:	98 85       	ldd	r25, Y+8	; 0x08
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	91 05       	cpc	r25, r1
 480:	09 f4       	brne	.+2      	; 0x484 <DIO_u8GetPinValue+0x7a>
 482:	3d c0       	rjmp	.+122    	; 0x4fe <DIO_u8GetPinValue+0xf4>
 484:	4f c0       	rjmp	.+158    	; 0x524 <DIO_u8GetPinValue+0x11a>
			case 0:
				*Pu8Value=get_bit(DIO_U8_PINA->ByteAccess ,u8PIN_ID);
 486:	e9 e3       	ldi	r30, 0x39	; 57
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_u8GetPinValue+0x94>
 49a:	55 95       	asr	r21
 49c:	47 95       	ror	r20
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_u8GetPinValue+0x90>
 4a2:	ca 01       	movw	r24, r20
 4a4:	81 70       	andi	r24, 0x01	; 1
 4a6:	ed 81       	ldd	r30, Y+5	; 0x05
 4a8:	fe 81       	ldd	r31, Y+6	; 0x06
 4aa:	80 83       	st	Z, r24
 4ac:	3b c0       	rjmp	.+118    	; 0x524 <DIO_u8GetPinValue+0x11a>
				break;
			case 1:
				*Pu8Value=get_bit(DIO_U8_PINB->ByteAccess ,u8PIN_ID);
 4ae:	e6 e3       	ldi	r30, 0x36	; 54
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	a9 01       	movw	r20, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_u8GetPinValue+0xbc>
 4c2:	55 95       	asr	r21
 4c4:	47 95       	ror	r20
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_u8GetPinValue+0xb8>
 4ca:	ca 01       	movw	r24, r20
 4cc:	81 70       	andi	r24, 0x01	; 1
 4ce:	ed 81       	ldd	r30, Y+5	; 0x05
 4d0:	fe 81       	ldd	r31, Y+6	; 0x06
 4d2:	80 83       	st	Z, r24
 4d4:	27 c0       	rjmp	.+78     	; 0x524 <DIO_u8GetPinValue+0x11a>
				break;
			case 2:
				*Pu8Value=get_bit(DIO_U8_PINC->ByteAccess ,u8PIN_ID);
 4d6:	e3 e3       	ldi	r30, 0x33	; 51
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_u8GetPinValue+0xe4>
 4ea:	55 95       	asr	r21
 4ec:	47 95       	ror	r20
 4ee:	8a 95       	dec	r24
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_u8GetPinValue+0xe0>
 4f2:	ca 01       	movw	r24, r20
 4f4:	81 70       	andi	r24, 0x01	; 1
 4f6:	ed 81       	ldd	r30, Y+5	; 0x05
 4f8:	fe 81       	ldd	r31, Y+6	; 0x06
 4fa:	80 83       	st	Z, r24
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <DIO_u8GetPinValue+0x11a>
				break;
			case 3:
				*Pu8Value=get_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 4fe:	e0 e3       	ldi	r30, 0x30	; 48
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	a9 01       	movw	r20, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_u8GetPinValue+0x10c>
 512:	55 95       	asr	r21
 514:	47 95       	ror	r20
 516:	8a 95       	dec	r24
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_u8GetPinValue+0x108>
 51a:	ca 01       	movw	r24, r20
 51c:	81 70       	andi	r24, 0x01	; 1
 51e:	ed 81       	ldd	r30, Y+5	; 0x05
 520:	fe 81       	ldd	r31, Y+6	; 0x06
 522:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 524:	8b 81       	ldd	r24, Y+3	; 0x03
	}
 526:	28 96       	adiw	r28, 0x08	; 8
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 u8PortNB, u8 u8Direction){
 538:	df 93       	push	r29
 53a:	cf 93       	push	r28
 53c:	00 d0       	rcall	.+0      	; 0x53e <DIO_u8SetPortDirection+0x6>
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_u8SetPortDirection+0x8>
 540:	0f 92       	push	r0
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	8a 83       	std	Y+2, r24	; 0x02
 548:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 54a:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	84 30       	cpi	r24, 0x04	; 4
 550:	18 f0       	brcs	.+6      	; 0x558 <DIO_u8SetPortDirection+0x20>
			u8ErrorState =1;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	89 83       	std	Y+1, r24	; 0x01
 556:	33 c0       	rjmp	.+102    	; 0x5be <DIO_u8SetPortDirection+0x86>
		}
		else{
			u8ErrorState =0 ;
 558:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	3d 83       	std	Y+5, r19	; 0x05
 562:	2c 83       	std	Y+4, r18	; 0x04
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	91 05       	cpc	r25, r1
 56c:	d1 f0       	breq	.+52     	; 0x5a2 <DIO_u8SetPortDirection+0x6a>
 56e:	2c 81       	ldd	r18, Y+4	; 0x04
 570:	3d 81       	ldd	r19, Y+5	; 0x05
 572:	22 30       	cpi	r18, 0x02	; 2
 574:	31 05       	cpc	r19, r1
 576:	2c f4       	brge	.+10     	; 0x582 <DIO_u8SetPortDirection+0x4a>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	9d 81       	ldd	r25, Y+5	; 0x05
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	61 f0       	breq	.+24     	; 0x598 <DIO_u8SetPortDirection+0x60>
 580:	1e c0       	rjmp	.+60     	; 0x5be <DIO_u8SetPortDirection+0x86>
 582:	2c 81       	ldd	r18, Y+4	; 0x04
 584:	3d 81       	ldd	r19, Y+5	; 0x05
 586:	22 30       	cpi	r18, 0x02	; 2
 588:	31 05       	cpc	r19, r1
 58a:	81 f0       	breq	.+32     	; 0x5ac <DIO_u8SetPortDirection+0x74>
 58c:	8c 81       	ldd	r24, Y+4	; 0x04
 58e:	9d 81       	ldd	r25, Y+5	; 0x05
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	91 05       	cpc	r25, r1
 594:	81 f0       	breq	.+32     	; 0x5b6 <DIO_u8SetPortDirection+0x7e>
 596:	13 c0       	rjmp	.+38     	; 0x5be <DIO_u8SetPortDirection+0x86>
			case 0:
				DIO_U8_DDRA->ByteAccess =u8Direction;
 598:	ea e3       	ldi	r30, 0x3A	; 58
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	80 83       	st	Z, r24
 5a0:	0e c0       	rjmp	.+28     	; 0x5be <DIO_u8SetPortDirection+0x86>
				break;
			case 1:
				DIO_U8_DDRB->ByteAccess=u8Direction;
 5a2:	e7 e3       	ldi	r30, 0x37	; 55
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	80 83       	st	Z, r24
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <DIO_u8SetPortDirection+0x86>
				break;

			case 2:
				DIO_U8_DDRC->ByteAccess=u8Direction;
 5ac:	e4 e3       	ldi	r30, 0x34	; 52
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	80 83       	st	Z, r24
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <DIO_u8SetPortDirection+0x86>
				break;
			case 3:
				DIO_U8_DDRD-> ByteAccess=u8Direction;
 5b6:	e1 e3       	ldi	r30, 0x31	; 49
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	80 83       	st	Z, r24
			default :
				break;
			}
		}
		/*Function return */
		return u8ErrorState;
 5be:	89 81       	ldd	r24, Y+1	; 0x01
	}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	08 95       	ret

000005d0 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 u8PortNB, u8 u8Value){
 5d0:	df 93       	push	r29
 5d2:	cf 93       	push	r28
 5d4:	00 d0       	rcall	.+0      	; 0x5d6 <DIO_u8SetPortValue+0x6>
 5d6:	00 d0       	rcall	.+0      	; 0x5d8 <DIO_u8SetPortValue+0x8>
 5d8:	0f 92       	push	r0
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	8a 83       	std	Y+2, r24	; 0x02
 5e0:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 5e2:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 5e4:	8a 81       	ldd	r24, Y+2	; 0x02
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	18 f0       	brcs	.+6      	; 0x5f0 <DIO_u8SetPortValue+0x20>
			u8ErrorState =1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	33 c0       	rjmp	.+102    	; 0x656 <DIO_u8SetPortValue+0x86>
		}
		else{
			u8ErrorState =0 ;
 5f0:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	3d 83       	std	Y+5, r19	; 0x05
 5fa:	2c 83       	std	Y+4, r18	; 0x04
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	9d 81       	ldd	r25, Y+5	; 0x05
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	91 05       	cpc	r25, r1
 604:	d1 f0       	breq	.+52     	; 0x63a <DIO_u8SetPortValue+0x6a>
 606:	2c 81       	ldd	r18, Y+4	; 0x04
 608:	3d 81       	ldd	r19, Y+5	; 0x05
 60a:	22 30       	cpi	r18, 0x02	; 2
 60c:	31 05       	cpc	r19, r1
 60e:	2c f4       	brge	.+10     	; 0x61a <DIO_u8SetPortValue+0x4a>
 610:	8c 81       	ldd	r24, Y+4	; 0x04
 612:	9d 81       	ldd	r25, Y+5	; 0x05
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	61 f0       	breq	.+24     	; 0x630 <DIO_u8SetPortValue+0x60>
 618:	1e c0       	rjmp	.+60     	; 0x656 <DIO_u8SetPortValue+0x86>
 61a:	2c 81       	ldd	r18, Y+4	; 0x04
 61c:	3d 81       	ldd	r19, Y+5	; 0x05
 61e:	22 30       	cpi	r18, 0x02	; 2
 620:	31 05       	cpc	r19, r1
 622:	81 f0       	breq	.+32     	; 0x644 <DIO_u8SetPortValue+0x74>
 624:	8c 81       	ldd	r24, Y+4	; 0x04
 626:	9d 81       	ldd	r25, Y+5	; 0x05
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	91 05       	cpc	r25, r1
 62c:	81 f0       	breq	.+32     	; 0x64e <DIO_u8SetPortValue+0x7e>
 62e:	13 c0       	rjmp	.+38     	; 0x656 <DIO_u8SetPortValue+0x86>
			case 0:
				DIO_U8_PORTA->ByteAccess =u8Value;
 630:	eb e3       	ldi	r30, 0x3B	; 59
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	80 83       	st	Z, r24
 638:	0e c0       	rjmp	.+28     	; 0x656 <DIO_u8SetPortValue+0x86>
				break;
			case 1:
				DIO_U8_PORTB->ByteAccess=u8Value;
 63a:	e8 e3       	ldi	r30, 0x38	; 56
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	80 83       	st	Z, r24
 642:	09 c0       	rjmp	.+18     	; 0x656 <DIO_u8SetPortValue+0x86>
				break;
			case 2:
				DIO_U8_PORTC->ByteAccess =u8Value;
 644:	e5 e3       	ldi	r30, 0x35	; 53
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	80 83       	st	Z, r24
 64c:	04 c0       	rjmp	.+8      	; 0x656 <DIO_u8SetPortValue+0x86>
				break;
			case 3:
				DIO_U8_PORTD-> ByteAccess=u8Value;
 64e:	e2 e3       	ldi	r30, 0x32	; 50
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 656:	89 81       	ldd	r24, Y+1	; 0x01
	}
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 u8PortNB, u8* Pu8Value){
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	00 d0       	rcall	.+0      	; 0x66e <DIO_u8GetPortValue+0x6>
 66e:	00 d0       	rcall	.+0      	; 0x670 <DIO_u8GetPortValue+0x8>
 670:	00 d0       	rcall	.+0      	; 0x672 <DIO_u8GetPortValue+0xa>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	8a 83       	std	Y+2, r24	; 0x02
 678:	7c 83       	std	Y+4, r23	; 0x04
 67a:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
			u8 u8ErrorState =0;
 67c:	19 82       	std	Y+1, r1	; 0x01


			/*validate Input*/
			if (u8PortNB >=  DIO_MAXPORTNB){
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	84 30       	cpi	r24, 0x04	; 4
 682:	18 f0       	brcs	.+6      	; 0x68a <DIO_u8GetPortValue+0x22>
				u8ErrorState =1;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	3b c0       	rjmp	.+118    	; 0x700 <DIO_u8GetPortValue+0x98>
			}
			else{
				u8ErrorState =0 ;
 68a:	19 82       	std	Y+1, r1	; 0x01

				switch (u8PortNB){
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	3e 83       	std	Y+6, r19	; 0x06
 694:	2d 83       	std	Y+5, r18	; 0x05
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	9e 81       	ldd	r25, Y+6	; 0x06
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	91 05       	cpc	r25, r1
 69e:	e1 f0       	breq	.+56     	; 0x6d8 <DIO_u8GetPortValue+0x70>
 6a0:	2d 81       	ldd	r18, Y+5	; 0x05
 6a2:	3e 81       	ldd	r19, Y+6	; 0x06
 6a4:	22 30       	cpi	r18, 0x02	; 2
 6a6:	31 05       	cpc	r19, r1
 6a8:	2c f4       	brge	.+10     	; 0x6b4 <DIO_u8GetPortValue+0x4c>
 6aa:	8d 81       	ldd	r24, Y+5	; 0x05
 6ac:	9e 81       	ldd	r25, Y+6	; 0x06
 6ae:	00 97       	sbiw	r24, 0x00	; 0
 6b0:	61 f0       	breq	.+24     	; 0x6ca <DIO_u8GetPortValue+0x62>
 6b2:	26 c0       	rjmp	.+76     	; 0x700 <DIO_u8GetPortValue+0x98>
 6b4:	2d 81       	ldd	r18, Y+5	; 0x05
 6b6:	3e 81       	ldd	r19, Y+6	; 0x06
 6b8:	22 30       	cpi	r18, 0x02	; 2
 6ba:	31 05       	cpc	r19, r1
 6bc:	a1 f0       	breq	.+40     	; 0x6e6 <DIO_u8GetPortValue+0x7e>
 6be:	8d 81       	ldd	r24, Y+5	; 0x05
 6c0:	9e 81       	ldd	r25, Y+6	; 0x06
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	91 05       	cpc	r25, r1
 6c6:	b1 f0       	breq	.+44     	; 0x6f4 <DIO_u8GetPortValue+0x8c>
 6c8:	1b c0       	rjmp	.+54     	; 0x700 <DIO_u8GetPortValue+0x98>
				case 0:
					*Pu8Value =DIO_U8_PINA->ByteAccess;
 6ca:	e9 e3       	ldi	r30, 0x39	; 57
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	eb 81       	ldd	r30, Y+3	; 0x03
 6d2:	fc 81       	ldd	r31, Y+4	; 0x04
 6d4:	80 83       	st	Z, r24
 6d6:	14 c0       	rjmp	.+40     	; 0x700 <DIO_u8GetPortValue+0x98>
					break;
				case 1:
					*Pu8Value=DIO_U8_PINB->ByteAccess;
 6d8:	e6 e3       	ldi	r30, 0x36	; 54
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	eb 81       	ldd	r30, Y+3	; 0x03
 6e0:	fc 81       	ldd	r31, Y+4	; 0x04
 6e2:	80 83       	st	Z, r24
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <DIO_u8GetPortValue+0x98>
					break;
				case 2:
					*Pu8Value=DIO_U8_PINC->ByteAccess;
 6e6:	e3 e3       	ldi	r30, 0x33	; 51
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	eb 81       	ldd	r30, Y+3	; 0x03
 6ee:	fc 81       	ldd	r31, Y+4	; 0x04
 6f0:	80 83       	st	Z, r24
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <DIO_u8GetPortValue+0x98>
					break;
				case 3:
					*Pu8Value=DIO_U8_PIND->ByteAccess;
 6f4:	e0 e3       	ldi	r30, 0x30	; 48
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	eb 81       	ldd	r30, Y+3	; 0x03
 6fc:	fc 81       	ldd	r31, Y+4	; 0x04
 6fe:	80 83       	st	Z, r24
					break;

				}
			}
			/*Function return */
			return u8ErrorState;
 700:	89 81       	ldd	r24, Y+1	; 0x01
		}
 702:	26 96       	adiw	r28, 0x06	; 6
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	cf 91       	pop	r28
 710:	df 91       	pop	r29
 712:	08 95       	ret

00000714 <DIO_u8SetPortPullUp>:
u8 DIO_u8SetPortPullUp(u8 u8PortNB,u8 u8Value){
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	00 d0       	rcall	.+0      	; 0x71a <DIO_u8SetPortPullUp+0x6>
 71a:	00 d0       	rcall	.+0      	; 0x71c <DIO_u8SetPortPullUp+0x8>
 71c:	0f 92       	push	r0
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	8a 83       	std	Y+2, r24	; 0x02
 724:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 726:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	84 30       	cpi	r24, 0x04	; 4
 72c:	18 f0       	brcs	.+6      	; 0x734 <DIO_u8SetPortPullUp+0x20>
			u8ErrorState =1;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	43 c0       	rjmp	.+134    	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
		}
		else{
			u8ErrorState =0 ;
 734:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	3d 83       	std	Y+5, r19	; 0x05
 73e:	2c 83       	std	Y+4, r18	; 0x04
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	91 05       	cpc	r25, r1
 748:	f1 f0       	breq	.+60     	; 0x786 <DIO_u8SetPortPullUp+0x72>
 74a:	2c 81       	ldd	r18, Y+4	; 0x04
 74c:	3d 81       	ldd	r19, Y+5	; 0x05
 74e:	22 30       	cpi	r18, 0x02	; 2
 750:	31 05       	cpc	r19, r1
 752:	2c f4       	brge	.+10     	; 0x75e <DIO_u8SetPortPullUp+0x4a>
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	61 f0       	breq	.+24     	; 0x774 <DIO_u8SetPortPullUp+0x60>
 75c:	2e c0       	rjmp	.+92     	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
 75e:	2c 81       	ldd	r18, Y+4	; 0x04
 760:	3d 81       	ldd	r19, Y+5	; 0x05
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	c1 f0       	breq	.+48     	; 0x798 <DIO_u8SetPortPullUp+0x84>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	91 05       	cpc	r25, r1
 770:	e1 f0       	breq	.+56     	; 0x7aa <DIO_u8SetPortPullUp+0x96>
 772:	23 c0       	rjmp	.+70     	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
			case 0:
				DIO_u8SetPortDirection(DIO_U8_PORTA,u8Value);
 774:	8b e3       	ldi	r24, 0x3B	; 59
 776:	6b 81       	ldd	r22, Y+3	; 0x03
 778:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>
				DIO_U8_PORTA->ByteAccess =u8Value;
 77c:	eb e3       	ldi	r30, 0x3B	; 59
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	80 83       	st	Z, r24
 784:	1a c0       	rjmp	.+52     	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
				break;
			case 1:
				DIO_u8SetPortDirection(DIO_U8_PORTB,u8Value);
 786:	88 e3       	ldi	r24, 0x38	; 56
 788:	6b 81       	ldd	r22, Y+3	; 0x03
 78a:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>
				DIO_U8_PORTB->ByteAccess=u8Value;
 78e:	e8 e3       	ldi	r30, 0x38	; 56
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	80 83       	st	Z, r24
 796:	11 c0       	rjmp	.+34     	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
				break;
			case 2:
				DIO_u8SetPortDirection(DIO_U8_PORTC,u8Value);
 798:	85 e3       	ldi	r24, 0x35	; 53
 79a:	6b 81       	ldd	r22, Y+3	; 0x03
 79c:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>
				DIO_U8_PORTC->ByteAccess =u8Value;
 7a0:	e5 e3       	ldi	r30, 0x35	; 53
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	80 83       	st	Z, r24
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <DIO_u8SetPortPullUp+0xa6>
				break;
			case 3:
				DIO_u8SetPortDirection(DIO_U8_PORTD,u8Value);
 7aa:	82 e3       	ldi	r24, 0x32	; 50
 7ac:	6b 81       	ldd	r22, Y+3	; 0x03
 7ae:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>
				DIO_U8_PORTD-> ByteAccess=u8Value;
 7b2:	e2 e3       	ldi	r30, 0x32	; 50
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
	}
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	cf 91       	pop	r28
 7c8:	df 91       	pop	r29
 7ca:	08 95       	ret

000007cc <DIO_u8SetPinPullUp>:
u8 DIO_u8SetPinPullUp(u8 u8PinNB){
 7cc:	df 93       	push	r29
 7ce:	cf 93       	push	r28
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <DIO_u8SetPinPullUp+0x6>
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <DIO_u8SetPinPullUp+0x8>
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <DIO_u8SetPinPullUp+0xa>
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	8c 83       	std	Y+4, r24	; 0x04
	/*Local variable*/
	u8 u8ErrorState =0;
 7dc:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 7de:	8c 81       	ldd	r24, Y+4	; 0x04
 7e0:	80 32       	cpi	r24, 0x20	; 32
 7e2:	18 f0       	brcs	.+6      	; 0x7ea <DIO_u8SetPinPullUp+0x1e>
		u8ErrorState =1;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	8b 83       	std	Y+3, r24	; 0x03
 7e8:	c6 c0       	rjmp	.+396    	; 0x976 <__stack+0x117>
	}
	else{
		u8ErrorState =0 ;
 7ea:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 7ec:	8c 81       	ldd	r24, Y+4	; 0x04
 7ee:	86 95       	lsr	r24
 7f0:	86 95       	lsr	r24
 7f2:	86 95       	lsr	r24
 7f4:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 7f6:	8c 81       	ldd	r24, Y+4	; 0x04
 7f8:	87 70       	andi	r24, 0x07	; 7
 7fa:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 7fc:	8a 81       	ldd	r24, Y+2	; 0x02
 7fe:	28 2f       	mov	r18, r24
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	3e 83       	std	Y+6, r19	; 0x06
 804:	2d 83       	std	Y+5, r18	; 0x05
 806:	8d 81       	ldd	r24, Y+5	; 0x05
 808:	9e 81       	ldd	r25, Y+6	; 0x06
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	91 05       	cpc	r25, r1
 80e:	09 f4       	brne	.+2      	; 0x812 <DIO_u8SetPinPullUp+0x46>
 810:	3e c0       	rjmp	.+124    	; 0x88e <__stack+0x2f>
 812:	2d 81       	ldd	r18, Y+5	; 0x05
 814:	3e 81       	ldd	r19, Y+6	; 0x06
 816:	22 30       	cpi	r18, 0x02	; 2
 818:	31 05       	cpc	r19, r1
 81a:	2c f4       	brge	.+10     	; 0x826 <DIO_u8SetPinPullUp+0x5a>
 81c:	8d 81       	ldd	r24, Y+5	; 0x05
 81e:	9e 81       	ldd	r25, Y+6	; 0x06
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	71 f0       	breq	.+28     	; 0x840 <DIO_u8SetPinPullUp+0x74>
 824:	a8 c0       	rjmp	.+336    	; 0x976 <__stack+0x117>
 826:	2d 81       	ldd	r18, Y+5	; 0x05
 828:	3e 81       	ldd	r19, Y+6	; 0x06
 82a:	22 30       	cpi	r18, 0x02	; 2
 82c:	31 05       	cpc	r19, r1
 82e:	09 f4       	brne	.+2      	; 0x832 <DIO_u8SetPinPullUp+0x66>
 830:	55 c0       	rjmp	.+170    	; 0x8dc <__stack+0x7d>
 832:	8d 81       	ldd	r24, Y+5	; 0x05
 834:	9e 81       	ldd	r25, Y+6	; 0x06
 836:	83 30       	cpi	r24, 0x03	; 3
 838:	91 05       	cpc	r25, r1
 83a:	09 f4       	brne	.+2      	; 0x83e <DIO_u8SetPinPullUp+0x72>
 83c:	76 c0       	rjmp	.+236    	; 0x92a <__stack+0xcb>
 83e:	9b c0       	rjmp	.+310    	; 0x976 <__stack+0x117>
		case 0:
			clr_bit(DIO_U8_PINA->ByteAccess,u8PIN_ID);
 840:	a9 e3       	ldi	r26, 0x39	; 57
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	e9 e3       	ldi	r30, 0x39	; 57
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	48 2f       	mov	r20, r24
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	28 2f       	mov	r18, r24
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_u8SetPinPullUp+0x90>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	2a 95       	dec	r18
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_u8SetPinPullUp+0x8c>
 860:	80 95       	com	r24
 862:	84 23       	and	r24, r20
 864:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTA->ByteAccess,u8PIN_ID);
 866:	ab e3       	ldi	r26, 0x3B	; 59
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	eb e3       	ldi	r30, 0x3B	; 59
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	48 2f       	mov	r20, r24
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	28 2f       	mov	r18, r24
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 2e       	mov	r0, r18
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	0a 94       	dec	r0
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	84 2b       	or	r24, r20
 88a:	8c 93       	st	X, r24
 88c:	74 c0       	rjmp	.+232    	; 0x976 <__stack+0x117>
			break;
		case 1:
			clr_bit(DIO_U8_PINB->ByteAccess,u8PIN_ID);
 88e:	a6 e3       	ldi	r26, 0x36	; 54
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	e6 e3       	ldi	r30, 0x36	; 54
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	48 2f       	mov	r20, r24
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	28 2f       	mov	r18, r24
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	2a 95       	dec	r18
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	84 23       	and	r24, r20
 8b2:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTB->ByteAccess,u8PIN_ID);
 8b4:	a8 e3       	ldi	r26, 0x38	; 56
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e8 e3       	ldi	r30, 0x38	; 56
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	48 2f       	mov	r20, r24
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 2e       	mov	r0, r18
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	0a 94       	dec	r0
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	84 2b       	or	r24, r20
 8d8:	8c 93       	st	X, r24
 8da:	4d c0       	rjmp	.+154    	; 0x976 <__stack+0x117>
			break;
		case 2:
			clr_bit(DIO_U8_PINC->ByteAccess,u8PIN_ID);
 8dc:	a3 e3       	ldi	r26, 0x33	; 51
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	e3 e3       	ldi	r30, 0x33	; 51
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	48 2f       	mov	r20, r24
 8e8:	89 81       	ldd	r24, Y+1	; 0x01
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	2a 95       	dec	r18
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
 8fc:	80 95       	com	r24
 8fe:	84 23       	and	r24, r20
 900:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTC->ByteAccess,u8PIN_ID);
 902:	a5 e3       	ldi	r26, 0x35	; 53
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	e5 e3       	ldi	r30, 0x35	; 53
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	48 2f       	mov	r20, r24
 90e:	89 81       	ldd	r24, Y+1	; 0x01
 910:	28 2f       	mov	r18, r24
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 2e       	mov	r0, r18
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	0a 94       	dec	r0
 922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
 924:	84 2b       	or	r24, r20
 926:	8c 93       	st	X, r24
 928:	26 c0       	rjmp	.+76     	; 0x976 <__stack+0x117>
			break;
		case 3:
			clr_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 92a:	a0 e3       	ldi	r26, 0x30	; 48
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e0 e3       	ldi	r30, 0x30	; 48
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	48 2f       	mov	r20, r24
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	28 2f       	mov	r18, r24
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	2a 95       	dec	r18
 948:	e2 f7       	brpl	.-8      	; 0x942 <__stack+0xe3>
 94a:	80 95       	com	r24
 94c:	84 23       	and	r24, r20
 94e:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTD->ByteAccess,u8PIN_ID);
 950:	a2 e3       	ldi	r26, 0x32	; 50
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	e2 e3       	ldi	r30, 0x32	; 50
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	48 2f       	mov	r20, r24
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	28 2f       	mov	r18, r24
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	02 2e       	mov	r0, r18
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	0a 94       	dec	r0
 970:	e2 f7       	brpl	.-8      	; 0x96a <__stack+0x10b>
 972:	84 2b       	or	r24, r20
 974:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 976:	8b 81       	ldd	r24, Y+3	; 0x03
}
 978:	26 96       	adiw	r28, 0x06	; 6
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	08 95       	ret

0000098a <delay_ms>:
 *      Author: Hanna Nabil
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	cd b7       	in	r28, 0x3d	; 61
 990:	de b7       	in	r29, 0x3e	; 62
 992:	28 97       	sbiw	r28, 0x08	; 8
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	6d 83       	std	Y+5, r22	; 0x05
 9a0:	7e 83       	std	Y+6, r23	; 0x06
 9a2:	8f 83       	std	Y+7, r24	; 0x07
 9a4:	98 87       	std	Y+8, r25	; 0x08
	for (u32 i =0 ; i< value*150;i++){
 9a6:	19 82       	std	Y+1, r1	; 0x01
 9a8:	1a 82       	std	Y+2, r1	; 0x02
 9aa:	1b 82       	std	Y+3, r1	; 0x03
 9ac:	1c 82       	std	Y+4, r1	; 0x04
 9ae:	0c c0       	rjmp	.+24     	; 0x9c8 <delay_ms+0x3e>
		asm("NOP");
 9b0:	00 00       	nop
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
	for (u32 i =0 ; i< value*150;i++){
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	ab 81       	ldd	r26, Y+3	; 0x03
 9b8:	bc 81       	ldd	r27, Y+4	; 0x04
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	a1 1d       	adc	r26, r1
 9be:	b1 1d       	adc	r27, r1
 9c0:	89 83       	std	Y+1, r24	; 0x01
 9c2:	9a 83       	std	Y+2, r25	; 0x02
 9c4:	ab 83       	std	Y+3, r26	; 0x03
 9c6:	bc 83       	std	Y+4, r27	; 0x04
 9c8:	8d 81       	ldd	r24, Y+5	; 0x05
 9ca:	9e 81       	ldd	r25, Y+6	; 0x06
 9cc:	af 81       	ldd	r26, Y+7	; 0x07
 9ce:	b8 85       	ldd	r27, Y+8	; 0x08
 9d0:	26 e9       	ldi	r18, 0x96	; 150
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	bc 01       	movw	r22, r24
 9da:	cd 01       	movw	r24, r26
 9dc:	0e 94 63 05 	call	0xac6	; 0xac6 <__mulsi3>
 9e0:	9b 01       	movw	r18, r22
 9e2:	ac 01       	movw	r20, r24
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	ab 81       	ldd	r26, Y+3	; 0x03
 9ea:	bc 81       	ldd	r27, Y+4	; 0x04
 9ec:	82 17       	cp	r24, r18
 9ee:	93 07       	cpc	r25, r19
 9f0:	a4 07       	cpc	r26, r20
 9f2:	b5 07       	cpc	r27, r21
 9f4:	e8 f2       	brcs	.-70     	; 0x9b0 <delay_ms+0x26>
		asm("NOP");
	}
}
 9f6:	28 96       	adiw	r28, 0x08	; 8
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	08 95       	ret

00000a08 <draw>:
u8 ball_middle_2screens[8]={128, 199, 125, 71, 64, 48, 48, 0};
u8 ball_up_2screens[8]={128, 199, 125, 199, 128, 0, 24, 24};
u8 ball_up_2screens_out[8]={128, 199, 125, 199, 128, 0, 0, 12};
u8 ball_up_2screens_out_completely[8]={128, 199, 125, 199, 128, 0, 0, 0};
/**************************************************************************/
void draw(u8 arr[]){
 a08:	df 93       	push	r29
 a0a:	cf 93       	push	r28
 a0c:	00 d0       	rcall	.+0      	; 0xa0e <draw+0x6>
 a0e:	0f 92       	push	r0
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	9b 83       	std	Y+3, r25	; 0x03
 a16:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;
	for (i=0;i<8;i++){
 a18:	19 82       	std	Y+1, r1	; 0x01
 a1a:	26 c0       	rjmp	.+76     	; 0xa68 <draw+0x60>
		DIO_u8SetPortValue(2,255&(~(1<<i)));
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	28 2f       	mov	r18, r24
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <draw+0x24>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	2a 95       	dec	r18
 a2e:	e2 f7       	brpl	.-8      	; 0xa28 <draw+0x20>
 a30:	98 2f       	mov	r25, r24
 a32:	90 95       	com	r25
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	69 2f       	mov	r22, r25
 a38:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(3,arr[i]);
 a3c:	89 81       	ldd	r24, Y+1	; 0x01
 a3e:	28 2f       	mov	r18, r24
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	8a 81       	ldd	r24, Y+2	; 0x02
 a44:	9b 81       	ldd	r25, Y+3	; 0x03
 a46:	fc 01       	movw	r30, r24
 a48:	e2 0f       	add	r30, r18
 a4a:	f3 1f       	adc	r31, r19
 a4c:	90 81       	ld	r25, Z
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	69 2f       	mov	r22, r25
 a52:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DIO_u8SetPortValue>
		delay_ms(2);
 a56:	62 e0       	ldi	r22, 0x02	; 2
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 c5 04 	call	0x98a	; 0x98a <delay_ms>
u8 ball_up_2screens_out[8]={128, 199, 125, 199, 128, 0, 0, 12};
u8 ball_up_2screens_out_completely[8]={128, 199, 125, 199, 128, 0, 0, 0};
/**************************************************************************/
void draw(u8 arr[]){
	u8 i ;
	for (i=0;i<8;i++){
 a62:	89 81       	ldd	r24, Y+1	; 0x01
 a64:	8f 5f       	subi	r24, 0xFF	; 255
 a66:	89 83       	std	Y+1, r24	; 0x01
 a68:	89 81       	ldd	r24, Y+1	; 0x01
 a6a:	88 30       	cpi	r24, 0x08	; 8
 a6c:	b8 f2       	brcs	.-82     	; 0xa1c <draw+0x14>
		DIO_u8SetPortValue(2,255&(~(1<<i)));
		DIO_u8SetPortValue(3,arr[i]);
		delay_ms(2);
	}
}
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	cf 91       	pop	r28
 a76:	df 91       	pop	r29
 a78:	08 95       	ret

00000a7a <main>:
int main (void){
 a7a:	df 93       	push	r29
 a7c:	cf 93       	push	r28
 a7e:	0f 92       	push	r0
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62


	DIO_u8SetPortDirection(DIO_U8_PORT2,0xFF);
 a84:	82 e0       	ldi	r24, 0x02	; 2
 a86:	6f ef       	ldi	r22, 0xFF	; 255
 a88:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_U8_PORT3,0xFF);
 a8c:	83 e0       	ldi	r24, 0x03	; 3
 a8e:	6f ef       	ldi	r22, 0xFF	; 255
 a90:	0e 94 9c 02 	call	0x538	; 0x538 <DIO_u8SetPortDirection>


	u8 j;
	while(1){

		for (j =0 ; j<12 ;j++){
 a94:	19 82       	std	Y+1, r1	; 0x01
 a96:	07 c0       	rjmp	.+14     	; 0xaa6 <main+0x2c>
			draw(big_heart);
 a98:	88 e6       	ldi	r24, 0x68	; 104
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 04 05 	call	0xa08	; 0xa08 <draw>


	u8 j;
	while(1){

		for (j =0 ; j<12 ;j++){
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	8f 5f       	subi	r24, 0xFF	; 255
 aa4:	89 83       	std	Y+1, r24	; 0x01
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	8c 30       	cpi	r24, 0x0C	; 12
 aaa:	b0 f3       	brcs	.-20     	; 0xa98 <main+0x1e>
			draw(big_heart);
		}
		for (j =0 ; j<12 ;j++){
 aac:	19 82       	std	Y+1, r1	; 0x01
 aae:	07 c0       	rjmp	.+14     	; 0xabe <main+0x44>
			draw(small_heart);
 ab0:	80 e7       	ldi	r24, 0x70	; 112
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 04 05 	call	0xa08	; 0xa08 <draw>
	while(1){

		for (j =0 ; j<12 ;j++){
			draw(big_heart);
		}
		for (j =0 ; j<12 ;j++){
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	8f 5f       	subi	r24, 0xFF	; 255
 abc:	89 83       	std	Y+1, r24	; 0x01
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	8c 30       	cpi	r24, 0x0C	; 12
 ac2:	b0 f3       	brcs	.-20     	; 0xab0 <main+0x36>
 ac4:	e7 cf       	rjmp	.-50     	; 0xa94 <main+0x1a>

00000ac6 <__mulsi3>:
 ac6:	62 9f       	mul	r22, r18
 ac8:	d0 01       	movw	r26, r0
 aca:	73 9f       	mul	r23, r19
 acc:	f0 01       	movw	r30, r0
 ace:	82 9f       	mul	r24, r18
 ad0:	e0 0d       	add	r30, r0
 ad2:	f1 1d       	adc	r31, r1
 ad4:	64 9f       	mul	r22, r20
 ad6:	e0 0d       	add	r30, r0
 ad8:	f1 1d       	adc	r31, r1
 ada:	92 9f       	mul	r25, r18
 adc:	f0 0d       	add	r31, r0
 ade:	83 9f       	mul	r24, r19
 ae0:	f0 0d       	add	r31, r0
 ae2:	74 9f       	mul	r23, r20
 ae4:	f0 0d       	add	r31, r0
 ae6:	65 9f       	mul	r22, r21
 ae8:	f0 0d       	add	r31, r0
 aea:	99 27       	eor	r25, r25
 aec:	72 9f       	mul	r23, r18
 aee:	b0 0d       	add	r27, r0
 af0:	e1 1d       	adc	r30, r1
 af2:	f9 1f       	adc	r31, r25
 af4:	63 9f       	mul	r22, r19
 af6:	b0 0d       	add	r27, r0
 af8:	e1 1d       	adc	r30, r1
 afa:	f9 1f       	adc	r31, r25
 afc:	bd 01       	movw	r22, r26
 afe:	cf 01       	movw	r24, r30
 b00:	11 24       	eor	r1, r1
 b02:	08 95       	ret

00000b04 <_exit>:
 b04:	f8 94       	cli

00000b06 <__stop_program>:
 b06:	ff cf       	rjmp	.-2      	; 0xb06 <__stop_program>
