
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d2c  00000dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800070  00800070  00000dd0  2**0
                  ALLOC
  3 .stab         00001308  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000906  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 06 	call	0xc92	; 0xc92 <main>
  8a:	0c 94 94 06 	jmp	0xd28	; 0xd28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInitialize>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
  a8:	e4 e3       	ldi	r30, 0x34	; 52
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	e1 e3       	ldi	r30, 0x31	; 49
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <DIO_u8SetPinDirection>:
										DIO_U8_PIN30_DIR,
										DIO_U8_PIN31_DIR);
								
}

u8 DIO_u8SetPinDirection(u8 u8PinNB, u8 u8Direction) {
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	27 97       	sbiw	r28, 0x07	; 7
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	8c 83       	std	Y+4, r24	; 0x04
  d0:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
  d2:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	80 32       	cpi	r24, 0x20	; 32
  d8:	18 f0       	brcs	.+6      	; 0xe0 <DIO_u8SetPinDirection+0x26>
		u8ErrorState =1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	8b 83       	std	Y+3, r24	; 0x03
  de:	bb c0       	rjmp	.+374    	; 0x256 <DIO_u8SetPinDirection+0x19c>
	}else if ((u8Direction != DIO_U8_INPUT ) && (u8Direction != DIO_U8_OUTPUT)){
  e0:	8d 81       	ldd	r24, Y+5	; 0x05
  e2:	88 23       	and	r24, r24
  e4:	31 f0       	breq	.+12     	; 0xf2 <DIO_u8SetPinDirection+0x38>
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f0       	breq	.+6      	; 0xf2 <DIO_u8SetPinDirection+0x38>
		u8ErrorState =1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8b 83       	std	Y+3, r24	; 0x03
  f0:	b2 c0       	rjmp	.+356    	; 0x256 <DIO_u8SetPinDirection+0x19c>
	}
	else{
		u8ErrorState =0 ;
  f2:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	86 95       	lsr	r24
  f8:	86 95       	lsr	r24
  fa:	86 95       	lsr	r24
  fc:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	87 70       	andi	r24, 0x07	; 7
 102:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	3f 83       	std	Y+7, r19	; 0x07
 10c:	2e 83       	std	Y+6, r18	; 0x06
 10e:	6e 81       	ldd	r22, Y+6	; 0x06
 110:	7f 81       	ldd	r23, Y+7	; 0x07
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	71 05       	cpc	r23, r1
 116:	d1 f1       	breq	.+116    	; 0x18c <DIO_u8SetPinDirection+0xd2>
 118:	8e 81       	ldd	r24, Y+6	; 0x06
 11a:	9f 81       	ldd	r25, Y+7	; 0x07
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	91 05       	cpc	r25, r1
 120:	34 f4       	brge	.+12     	; 0x12e <DIO_u8SetPinDirection+0x74>
 122:	2e 81       	ldd	r18, Y+6	; 0x06
 124:	3f 81       	ldd	r19, Y+7	; 0x07
 126:	21 15       	cp	r18, r1
 128:	31 05       	cpc	r19, r1
 12a:	71 f0       	breq	.+28     	; 0x148 <DIO_u8SetPinDirection+0x8e>
 12c:	94 c0       	rjmp	.+296    	; 0x256 <DIO_u8SetPinDirection+0x19c>
 12e:	6e 81       	ldd	r22, Y+6	; 0x06
 130:	7f 81       	ldd	r23, Y+7	; 0x07
 132:	62 30       	cpi	r22, 0x02	; 2
 134:	71 05       	cpc	r23, r1
 136:	09 f4       	brne	.+2      	; 0x13a <DIO_u8SetPinDirection+0x80>
 138:	4b c0       	rjmp	.+150    	; 0x1d0 <DIO_u8SetPinDirection+0x116>
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	9f 81       	ldd	r25, Y+7	; 0x07
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	91 05       	cpc	r25, r1
 142:	09 f4       	brne	.+2      	; 0x146 <DIO_u8SetPinDirection+0x8c>
 144:	67 c0       	rjmp	.+206    	; 0x214 <DIO_u8SetPinDirection+0x15a>
 146:	87 c0       	rjmp	.+270    	; 0x256 <DIO_u8SetPinDirection+0x19c>
		case 0:
			assign_bit(DIO_U8_DDRA->ByteAccess ,u8PIN_ID,u8Direction);
 148:	aa e3       	ldi	r26, 0x3A	; 58
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ea e3       	ldi	r30, 0x3A	; 58
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_u8SetPinDirection+0xaa>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_u8SetPinDirection+0xa6>
 168:	80 95       	com	r24
 16a:	48 23       	and	r20, r24
 16c:	8d 81       	ldd	r24, Y+5	; 0x05
 16e:	28 2f       	mov	r18, r24
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_u8SetPinDirection+0xc6>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_u8SetPinDirection+0xc2>
 184:	cb 01       	movw	r24, r22
 186:	84 2b       	or	r24, r20
 188:	8c 93       	st	X, r24
 18a:	65 c0       	rjmp	.+202    	; 0x256 <DIO_u8SetPinDirection+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_DDRB->ByteAccess ,u8PIN_ID,u8Direction);
 18c:	a7 e3       	ldi	r26, 0x37	; 55
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e7 e3       	ldi	r30, 0x37	; 55
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	48 2f       	mov	r20, r24
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	28 2f       	mov	r18, r24
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8SetPinDirection+0xee>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	2a 95       	dec	r18
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8SetPinDirection+0xea>
 1ac:	80 95       	com	r24
 1ae:	48 23       	and	r20, r24
 1b0:	8d 81       	ldd	r24, Y+5	; 0x05
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	88 2f       	mov	r24, r24
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_u8SetPinDirection+0x10a>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_u8SetPinDirection+0x106>
 1c8:	cb 01       	movw	r24, r22
 1ca:	84 2b       	or	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	43 c0       	rjmp	.+134    	; 0x256 <DIO_u8SetPinDirection+0x19c>
			break;

		case 2:
			assign_bit(DIO_U8_DDRC->ByteAccess ,u8PIN_ID,u8Direction);
 1d0:	a4 e3       	ldi	r26, 0x34	; 52
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e4 e3       	ldi	r30, 0x34	; 52
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	48 2f       	mov	r20, r24
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinDirection+0x132>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	2a 95       	dec	r18
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinDirection+0x12e>
 1f0:	80 95       	com	r24
 1f2:	48 23       	and	r20, r24
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	88 2f       	mov	r24, r24
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_u8SetPinDirection+0x14e>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_u8SetPinDirection+0x14a>
 20c:	cb 01       	movw	r24, r22
 20e:	84 2b       	or	r24, r20
 210:	8c 93       	st	X, r24
 212:	21 c0       	rjmp	.+66     	; 0x256 <DIO_u8SetPinDirection+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_DDRD-> ByteAccess,u8PIN_ID,u8Direction);
 214:	a1 e3       	ldi	r26, 0x31	; 49
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e1 e3       	ldi	r30, 0x31	; 49
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinDirection+0x176>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinDirection+0x172>
 234:	80 95       	com	r24
 236:	48 23       	and	r20, r24
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	88 2f       	mov	r24, r24
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinDirection+0x192>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinDirection+0x18e>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	8c 93       	st	X, r24
		default :
			break;
		}
	}
	/*Function return */
	return u8ErrorState;
 256:	8b 81       	ldd	r24, Y+3	; 0x03
}
 258:	27 96       	adiw	r28, 0x07	; 7
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
 264:	cf 91       	pop	r28
 266:	df 91       	pop	r29
 268:	08 95       	ret

0000026a <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 u8PinNB, u8 u8Value) {
 26a:	df 93       	push	r29
 26c:	cf 93       	push	r28
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	27 97       	sbiw	r28, 0x07	; 7
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	8c 83       	std	Y+4, r24	; 0x04
 280:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
	u8 u8ErrorState =0;
 282:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	80 32       	cpi	r24, 0x20	; 32
 288:	18 f0       	brcs	.+6      	; 0x290 <DIO_u8SetPinValue+0x26>
		u8ErrorState =1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	8b 83       	std	Y+3, r24	; 0x03
 28e:	bb c0       	rjmp	.+374    	; 0x406 <DIO_u8SetPinValue+0x19c>
	}else if ((u8Value != DIO_U8_HIGH ) && (u8Value != DIO_U8_LOW)){
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	31 f0       	breq	.+12     	; 0x2a2 <DIO_u8SetPinValue+0x38>
 296:	8d 81       	ldd	r24, Y+5	; 0x05
 298:	88 23       	and	r24, r24
 29a:	19 f0       	breq	.+6      	; 0x2a2 <DIO_u8SetPinValue+0x38>
		u8ErrorState =1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	8b 83       	std	Y+3, r24	; 0x03
 2a0:	b2 c0       	rjmp	.+356    	; 0x406 <DIO_u8SetPinValue+0x19c>
	}
	else{
		u8ErrorState =0 ;
 2a2:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
 2a6:	86 95       	lsr	r24
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	87 70       	andi	r24, 0x07	; 7
 2b2:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3f 83       	std	Y+7, r19	; 0x07
 2bc:	2e 83       	std	Y+6, r18	; 0x06
 2be:	6e 81       	ldd	r22, Y+6	; 0x06
 2c0:	7f 81       	ldd	r23, Y+7	; 0x07
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	71 05       	cpc	r23, r1
 2c6:	d1 f1       	breq	.+116    	; 0x33c <DIO_u8SetPinValue+0xd2>
 2c8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ca:	9f 81       	ldd	r25, Y+7	; 0x07
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	91 05       	cpc	r25, r1
 2d0:	34 f4       	brge	.+12     	; 0x2de <DIO_u8SetPinValue+0x74>
 2d2:	2e 81       	ldd	r18, Y+6	; 0x06
 2d4:	3f 81       	ldd	r19, Y+7	; 0x07
 2d6:	21 15       	cp	r18, r1
 2d8:	31 05       	cpc	r19, r1
 2da:	71 f0       	breq	.+28     	; 0x2f8 <DIO_u8SetPinValue+0x8e>
 2dc:	94 c0       	rjmp	.+296    	; 0x406 <DIO_u8SetPinValue+0x19c>
 2de:	6e 81       	ldd	r22, Y+6	; 0x06
 2e0:	7f 81       	ldd	r23, Y+7	; 0x07
 2e2:	62 30       	cpi	r22, 0x02	; 2
 2e4:	71 05       	cpc	r23, r1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_u8SetPinValue+0x80>
 2e8:	4b c0       	rjmp	.+150    	; 0x380 <DIO_u8SetPinValue+0x116>
 2ea:	8e 81       	ldd	r24, Y+6	; 0x06
 2ec:	9f 81       	ldd	r25, Y+7	; 0x07
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	91 05       	cpc	r25, r1
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <DIO_u8SetPinValue+0x8c>
 2f4:	67 c0       	rjmp	.+206    	; 0x3c4 <DIO_u8SetPinValue+0x15a>
 2f6:	87 c0       	rjmp	.+270    	; 0x406 <DIO_u8SetPinValue+0x19c>
		case 0:
			assign_bit(DIO_U8_PORTA->ByteAccess ,u8PIN_ID,u8Value);
 2f8:	ab e3       	ldi	r26, 0x3B	; 59
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	eb e3       	ldi	r30, 0x3B	; 59
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8SetPinValue+0xaa>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	2a 95       	dec	r18
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8SetPinValue+0xa6>
 318:	80 95       	com	r24
 31a:	48 23       	and	r20, r24
 31c:	8d 81       	ldd	r24, Y+5	; 0x05
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	88 2f       	mov	r24, r24
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_u8SetPinValue+0xc6>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_u8SetPinValue+0xc2>
 334:	cb 01       	movw	r24, r22
 336:	84 2b       	or	r24, r20
 338:	8c 93       	st	X, r24
 33a:	65 c0       	rjmp	.+202    	; 0x406 <DIO_u8SetPinValue+0x19c>
			break;
		case 1:
			assign_bit(DIO_U8_PORTB->ByteAccess ,u8PIN_ID,u8Value);
 33c:	a8 e3       	ldi	r26, 0x38	; 56
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e8 e3       	ldi	r30, 0x38	; 56
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8SetPinValue+0xee>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	2a 95       	dec	r18
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8SetPinValue+0xea>
 35c:	80 95       	com	r24
 35e:	48 23       	and	r20, r24
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	88 2f       	mov	r24, r24
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_u8SetPinValue+0x10a>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_u8SetPinValue+0x106>
 378:	cb 01       	movw	r24, r22
 37a:	84 2b       	or	r24, r20
 37c:	8c 93       	st	X, r24
 37e:	43 c0       	rjmp	.+134    	; 0x406 <DIO_u8SetPinValue+0x19c>
			break;
		case 2:
			assign_bit(DIO_U8_PORTC->ByteAccess ,u8PIN_ID,u8Value);
 380:	a5 e3       	ldi	r26, 0x35	; 53
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e5 e3       	ldi	r30, 0x35	; 53
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_u8SetPinValue+0x132>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_u8SetPinValue+0x12e>
 3a0:	80 95       	com	r24
 3a2:	48 23       	and	r20, r24
 3a4:	8d 81       	ldd	r24, Y+5	; 0x05
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8SetPinValue+0x14e>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8SetPinValue+0x14a>
 3bc:	cb 01       	movw	r24, r22
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	21 c0       	rjmp	.+66     	; 0x406 <DIO_u8SetPinValue+0x19c>
			break;
		case 3:
			assign_bit(DIO_U8_PORTD-> ByteAccess,u8PIN_ID,u8Value);
 3c4:	a2 e3       	ldi	r26, 0x32	; 50
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e2 e3       	ldi	r30, 0x32	; 50
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_u8SetPinValue+0x176>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	2a 95       	dec	r18
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_u8SetPinValue+0x172>
 3e4:	80 95       	com	r24
 3e6:	48 23       	and	r20, r24
 3e8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	b9 01       	movw	r22, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_u8SetPinValue+0x192>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	8a 95       	dec	r24
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_u8SetPinValue+0x18e>
 400:	cb 01       	movw	r24, r22
 402:	84 2b       	or	r24, r20
 404:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 406:	8b 81       	ldd	r24, Y+3	; 0x03
}
 408:	27 96       	adiw	r28, 0x07	; 7
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	08 95       	ret

0000041a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 u8PinNB, u8* Pu8Value){
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	28 97       	sbiw	r28, 0x08	; 8
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	8c 83       	std	Y+4, r24	; 0x04
 430:	7e 83       	std	Y+6, r23	; 0x06
 432:	6d 83       	std	Y+5, r22	; 0x05
	/*Local variable*/
		u8 u8ErrorState =0;
 434:	1b 82       	std	Y+3, r1	; 0x03
		u8 u8PORT_ID ,u8PIN_ID;

		/*validate Input*/
		if (u8PinNB >=  DIO_MAXPINNB){
 436:	8c 81       	ldd	r24, Y+4	; 0x04
 438:	80 32       	cpi	r24, 0x20	; 32
 43a:	18 f0       	brcs	.+6      	; 0x442 <DIO_u8GetPinValue+0x28>
			u8ErrorState =1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	8b 83       	std	Y+3, r24	; 0x03
 440:	79 c0       	rjmp	.+242    	; 0x534 <DIO_u8GetPinValue+0x11a>
		}
		else{
			u8ErrorState =0 ;
 442:	1b 82       	std	Y+3, r1	; 0x03
			u8PORT_ID = u8PinNB /PINS_PER_PORT;
 444:	8c 81       	ldd	r24, Y+4	; 0x04
 446:	86 95       	lsr	r24
 448:	86 95       	lsr	r24
 44a:	86 95       	lsr	r24
 44c:	8a 83       	std	Y+2, r24	; 0x02
			u8PIN_ID = u8PinNB % PINS_PER_PORT;
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	87 70       	andi	r24, 0x07	; 7
 452:	89 83       	std	Y+1, r24	; 0x01
			switch (u8PORT_ID){
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	38 87       	std	Y+8, r19	; 0x08
 45c:	2f 83       	std	Y+7, r18	; 0x07
 45e:	4f 81       	ldd	r20, Y+7	; 0x07
 460:	58 85       	ldd	r21, Y+8	; 0x08
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	51 05       	cpc	r21, r1
 466:	59 f1       	breq	.+86     	; 0x4be <DIO_u8GetPinValue+0xa4>
 468:	8f 81       	ldd	r24, Y+7	; 0x07
 46a:	98 85       	ldd	r25, Y+8	; 0x08
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	91 05       	cpc	r25, r1
 470:	34 f4       	brge	.+12     	; 0x47e <DIO_u8GetPinValue+0x64>
 472:	2f 81       	ldd	r18, Y+7	; 0x07
 474:	38 85       	ldd	r19, Y+8	; 0x08
 476:	21 15       	cp	r18, r1
 478:	31 05       	cpc	r19, r1
 47a:	69 f0       	breq	.+26     	; 0x496 <DIO_u8GetPinValue+0x7c>
 47c:	5b c0       	rjmp	.+182    	; 0x534 <DIO_u8GetPinValue+0x11a>
 47e:	4f 81       	ldd	r20, Y+7	; 0x07
 480:	58 85       	ldd	r21, Y+8	; 0x08
 482:	42 30       	cpi	r20, 0x02	; 2
 484:	51 05       	cpc	r21, r1
 486:	79 f1       	breq	.+94     	; 0x4e6 <DIO_u8GetPinValue+0xcc>
 488:	8f 81       	ldd	r24, Y+7	; 0x07
 48a:	98 85       	ldd	r25, Y+8	; 0x08
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	91 05       	cpc	r25, r1
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_u8GetPinValue+0x7a>
 492:	3d c0       	rjmp	.+122    	; 0x50e <DIO_u8GetPinValue+0xf4>
 494:	4f c0       	rjmp	.+158    	; 0x534 <DIO_u8GetPinValue+0x11a>
			case 0:
				*Pu8Value=get_bit(DIO_U8_PINA->ByteAccess ,u8PIN_ID);
 496:	e9 e3       	ldi	r30, 0x39	; 57
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	89 81       	ldd	r24, Y+1	; 0x01
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a9 01       	movw	r20, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_u8GetPinValue+0x94>
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_u8GetPinValue+0x90>
 4b2:	ca 01       	movw	r24, r20
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	ed 81       	ldd	r30, Y+5	; 0x05
 4b8:	fe 81       	ldd	r31, Y+6	; 0x06
 4ba:	80 83       	st	Z, r24
 4bc:	3b c0       	rjmp	.+118    	; 0x534 <DIO_u8GetPinValue+0x11a>
				break;
			case 1:
				*Pu8Value=get_bit(DIO_U8_PINB->ByteAccess ,u8PIN_ID);
 4be:	e6 e3       	ldi	r30, 0x36	; 54
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	a9 01       	movw	r20, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_u8GetPinValue+0xbc>
 4d2:	55 95       	asr	r21
 4d4:	47 95       	ror	r20
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_u8GetPinValue+0xb8>
 4da:	ca 01       	movw	r24, r20
 4dc:	81 70       	andi	r24, 0x01	; 1
 4de:	ed 81       	ldd	r30, Y+5	; 0x05
 4e0:	fe 81       	ldd	r31, Y+6	; 0x06
 4e2:	80 83       	st	Z, r24
 4e4:	27 c0       	rjmp	.+78     	; 0x534 <DIO_u8GetPinValue+0x11a>
				break;
			case 2:
				*Pu8Value=get_bit(DIO_U8_PINC->ByteAccess ,u8PIN_ID);
 4e6:	e3 e3       	ldi	r30, 0x33	; 51
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_u8GetPinValue+0xe4>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_u8GetPinValue+0xe0>
 502:	ca 01       	movw	r24, r20
 504:	81 70       	andi	r24, 0x01	; 1
 506:	ed 81       	ldd	r30, Y+5	; 0x05
 508:	fe 81       	ldd	r31, Y+6	; 0x06
 50a:	80 83       	st	Z, r24
 50c:	13 c0       	rjmp	.+38     	; 0x534 <DIO_u8GetPinValue+0x11a>
				break;
			case 3:
				*Pu8Value=get_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 50e:	e0 e3       	ldi	r30, 0x30	; 48
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	a9 01       	movw	r20, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_u8GetPinValue+0x10c>
 522:	55 95       	asr	r21
 524:	47 95       	ror	r20
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_u8GetPinValue+0x108>
 52a:	ca 01       	movw	r24, r20
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	ed 81       	ldd	r30, Y+5	; 0x05
 530:	fe 81       	ldd	r31, Y+6	; 0x06
 532:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 534:	8b 81       	ldd	r24, Y+3	; 0x03
	}
 536:	28 96       	adiw	r28, 0x08	; 8
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 u8PortNB, u8 u8Direction){
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <DIO_u8SetPortDirection+0x6>
 54e:	00 d0       	rcall	.+0      	; 0x550 <DIO_u8SetPortDirection+0x8>
 550:	0f 92       	push	r0
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	8a 83       	std	Y+2, r24	; 0x02
 558:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 55a:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	18 f0       	brcs	.+6      	; 0x568 <DIO_u8SetPortDirection+0x20>
			u8ErrorState =1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	89 83       	std	Y+1, r24	; 0x01
 566:	33 c0       	rjmp	.+102    	; 0x5ce <DIO_u8SetPortDirection+0x86>
		}
		else{
			u8ErrorState =0 ;
 568:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	3d 83       	std	Y+5, r19	; 0x05
 572:	2c 83       	std	Y+4, r18	; 0x04
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	91 05       	cpc	r25, r1
 57c:	d1 f0       	breq	.+52     	; 0x5b2 <DIO_u8SetPortDirection+0x6a>
 57e:	2c 81       	ldd	r18, Y+4	; 0x04
 580:	3d 81       	ldd	r19, Y+5	; 0x05
 582:	22 30       	cpi	r18, 0x02	; 2
 584:	31 05       	cpc	r19, r1
 586:	2c f4       	brge	.+10     	; 0x592 <DIO_u8SetPortDirection+0x4a>
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	9d 81       	ldd	r25, Y+5	; 0x05
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	61 f0       	breq	.+24     	; 0x5a8 <DIO_u8SetPortDirection+0x60>
 590:	1e c0       	rjmp	.+60     	; 0x5ce <DIO_u8SetPortDirection+0x86>
 592:	2c 81       	ldd	r18, Y+4	; 0x04
 594:	3d 81       	ldd	r19, Y+5	; 0x05
 596:	22 30       	cpi	r18, 0x02	; 2
 598:	31 05       	cpc	r19, r1
 59a:	81 f0       	breq	.+32     	; 0x5bc <DIO_u8SetPortDirection+0x74>
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	9d 81       	ldd	r25, Y+5	; 0x05
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	91 05       	cpc	r25, r1
 5a4:	81 f0       	breq	.+32     	; 0x5c6 <DIO_u8SetPortDirection+0x7e>
 5a6:	13 c0       	rjmp	.+38     	; 0x5ce <DIO_u8SetPortDirection+0x86>
			case 0:
				DIO_U8_DDRA->ByteAccess =u8Direction;
 5a8:	ea e3       	ldi	r30, 0x3A	; 58
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	80 83       	st	Z, r24
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <DIO_u8SetPortDirection+0x86>
				break;
			case 1:
				DIO_U8_DDRB->ByteAccess=u8Direction;
 5b2:	e7 e3       	ldi	r30, 0x37	; 55
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	80 83       	st	Z, r24
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <DIO_u8SetPortDirection+0x86>
				break;

			case 2:
				DIO_U8_DDRC->ByteAccess=u8Direction;
 5bc:	e4 e3       	ldi	r30, 0x34	; 52
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	80 83       	st	Z, r24
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <DIO_u8SetPortDirection+0x86>
				break;
			case 3:
				DIO_U8_DDRD-> ByteAccess=u8Direction;
 5c6:	e1 e3       	ldi	r30, 0x31	; 49
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	8b 81       	ldd	r24, Y+3	; 0x03
 5cc:	80 83       	st	Z, r24
			default :
				break;
			}
		}
		/*Function return */
		return u8ErrorState;
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
	}
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	cf 91       	pop	r28
 5dc:	df 91       	pop	r29
 5de:	08 95       	ret

000005e0 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 u8PortNB, u8 u8Value){
 5e0:	df 93       	push	r29
 5e2:	cf 93       	push	r28
 5e4:	00 d0       	rcall	.+0      	; 0x5e6 <DIO_u8SetPortValue+0x6>
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <DIO_u8SetPortValue+0x8>
 5e8:	0f 92       	push	r0
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	8a 83       	std	Y+2, r24	; 0x02
 5f0:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 5f2:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	84 30       	cpi	r24, 0x04	; 4
 5f8:	18 f0       	brcs	.+6      	; 0x600 <DIO_u8SetPortValue+0x20>
			u8ErrorState =1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	33 c0       	rjmp	.+102    	; 0x666 <DIO_u8SetPortValue+0x86>
		}
		else{
			u8ErrorState =0 ;
 600:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	3d 83       	std	Y+5, r19	; 0x05
 60a:	2c 83       	std	Y+4, r18	; 0x04
 60c:	8c 81       	ldd	r24, Y+4	; 0x04
 60e:	9d 81       	ldd	r25, Y+5	; 0x05
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	d1 f0       	breq	.+52     	; 0x64a <DIO_u8SetPortValue+0x6a>
 616:	2c 81       	ldd	r18, Y+4	; 0x04
 618:	3d 81       	ldd	r19, Y+5	; 0x05
 61a:	22 30       	cpi	r18, 0x02	; 2
 61c:	31 05       	cpc	r19, r1
 61e:	2c f4       	brge	.+10     	; 0x62a <DIO_u8SetPortValue+0x4a>
 620:	8c 81       	ldd	r24, Y+4	; 0x04
 622:	9d 81       	ldd	r25, Y+5	; 0x05
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	61 f0       	breq	.+24     	; 0x640 <DIO_u8SetPortValue+0x60>
 628:	1e c0       	rjmp	.+60     	; 0x666 <DIO_u8SetPortValue+0x86>
 62a:	2c 81       	ldd	r18, Y+4	; 0x04
 62c:	3d 81       	ldd	r19, Y+5	; 0x05
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	81 f0       	breq	.+32     	; 0x654 <DIO_u8SetPortValue+0x74>
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	9d 81       	ldd	r25, Y+5	; 0x05
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	81 f0       	breq	.+32     	; 0x65e <DIO_u8SetPortValue+0x7e>
 63e:	13 c0       	rjmp	.+38     	; 0x666 <DIO_u8SetPortValue+0x86>
			case 0:
				DIO_U8_PORTA->ByteAccess =u8Value;
 640:	eb e3       	ldi	r30, 0x3B	; 59
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	80 83       	st	Z, r24
 648:	0e c0       	rjmp	.+28     	; 0x666 <DIO_u8SetPortValue+0x86>
				break;
			case 1:
				DIO_U8_PORTB->ByteAccess=u8Value;
 64a:	e8 e3       	ldi	r30, 0x38	; 56
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	80 83       	st	Z, r24
 652:	09 c0       	rjmp	.+18     	; 0x666 <DIO_u8SetPortValue+0x86>
				break;
			case 2:
				DIO_U8_PORTC->ByteAccess =u8Value;
 654:	e5 e3       	ldi	r30, 0x35	; 53
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	80 83       	st	Z, r24
 65c:	04 c0       	rjmp	.+8      	; 0x666 <DIO_u8SetPortValue+0x86>
				break;
			case 3:
				DIO_U8_PORTD-> ByteAccess=u8Value;
 65e:	e2 e3       	ldi	r30, 0x32	; 50
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 666:	89 81       	ldd	r24, Y+1	; 0x01
	}
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	cf 91       	pop	r28
 674:	df 91       	pop	r29
 676:	08 95       	ret

00000678 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 u8PortNB, u8* Pu8Value){
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_u8GetPortValue+0x6>
 67e:	00 d0       	rcall	.+0      	; 0x680 <DIO_u8GetPortValue+0x8>
 680:	00 d0       	rcall	.+0      	; 0x682 <DIO_u8GetPortValue+0xa>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	8a 83       	std	Y+2, r24	; 0x02
 688:	7c 83       	std	Y+4, r23	; 0x04
 68a:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
			u8 u8ErrorState =0;
 68c:	19 82       	std	Y+1, r1	; 0x01


			/*validate Input*/
			if (u8PortNB >=  DIO_MAXPORTNB){
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	84 30       	cpi	r24, 0x04	; 4
 692:	18 f0       	brcs	.+6      	; 0x69a <DIO_u8GetPortValue+0x22>
				u8ErrorState =1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	3b c0       	rjmp	.+118    	; 0x710 <DIO_u8GetPortValue+0x98>
			}
			else{
				u8ErrorState =0 ;
 69a:	19 82       	std	Y+1, r1	; 0x01

				switch (u8PortNB){
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	3e 83       	std	Y+6, r19	; 0x06
 6a4:	2d 83       	std	Y+5, r18	; 0x05
 6a6:	8d 81       	ldd	r24, Y+5	; 0x05
 6a8:	9e 81       	ldd	r25, Y+6	; 0x06
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	91 05       	cpc	r25, r1
 6ae:	e1 f0       	breq	.+56     	; 0x6e8 <DIO_u8GetPortValue+0x70>
 6b0:	2d 81       	ldd	r18, Y+5	; 0x05
 6b2:	3e 81       	ldd	r19, Y+6	; 0x06
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	31 05       	cpc	r19, r1
 6b8:	2c f4       	brge	.+10     	; 0x6c4 <DIO_u8GetPortValue+0x4c>
 6ba:	8d 81       	ldd	r24, Y+5	; 0x05
 6bc:	9e 81       	ldd	r25, Y+6	; 0x06
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	61 f0       	breq	.+24     	; 0x6da <DIO_u8GetPortValue+0x62>
 6c2:	26 c0       	rjmp	.+76     	; 0x710 <DIO_u8GetPortValue+0x98>
 6c4:	2d 81       	ldd	r18, Y+5	; 0x05
 6c6:	3e 81       	ldd	r19, Y+6	; 0x06
 6c8:	22 30       	cpi	r18, 0x02	; 2
 6ca:	31 05       	cpc	r19, r1
 6cc:	a1 f0       	breq	.+40     	; 0x6f6 <DIO_u8GetPortValue+0x7e>
 6ce:	8d 81       	ldd	r24, Y+5	; 0x05
 6d0:	9e 81       	ldd	r25, Y+6	; 0x06
 6d2:	83 30       	cpi	r24, 0x03	; 3
 6d4:	91 05       	cpc	r25, r1
 6d6:	b1 f0       	breq	.+44     	; 0x704 <DIO_u8GetPortValue+0x8c>
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <DIO_u8GetPortValue+0x98>
				case 0:
					*Pu8Value =DIO_U8_PINA->ByteAccess;
 6da:	e9 e3       	ldi	r30, 0x39	; 57
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	eb 81       	ldd	r30, Y+3	; 0x03
 6e2:	fc 81       	ldd	r31, Y+4	; 0x04
 6e4:	80 83       	st	Z, r24
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <DIO_u8GetPortValue+0x98>
					break;
				case 1:
					*Pu8Value=DIO_U8_PINB->ByteAccess;
 6e8:	e6 e3       	ldi	r30, 0x36	; 54
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	eb 81       	ldd	r30, Y+3	; 0x03
 6f0:	fc 81       	ldd	r31, Y+4	; 0x04
 6f2:	80 83       	st	Z, r24
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <DIO_u8GetPortValue+0x98>
					break;
				case 2:
					*Pu8Value=DIO_U8_PINC->ByteAccess;
 6f6:	e3 e3       	ldi	r30, 0x33	; 51
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	eb 81       	ldd	r30, Y+3	; 0x03
 6fe:	fc 81       	ldd	r31, Y+4	; 0x04
 700:	80 83       	st	Z, r24
 702:	06 c0       	rjmp	.+12     	; 0x710 <DIO_u8GetPortValue+0x98>
					break;
				case 3:
					*Pu8Value=DIO_U8_PIND->ByteAccess;
 704:	e0 e3       	ldi	r30, 0x30	; 48
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	eb 81       	ldd	r30, Y+3	; 0x03
 70c:	fc 81       	ldd	r31, Y+4	; 0x04
 70e:	80 83       	st	Z, r24
					break;

				}
			}
			/*Function return */
			return u8ErrorState;
 710:	89 81       	ldd	r24, Y+1	; 0x01
		}
 712:	26 96       	adiw	r28, 0x06	; 6
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	cf 91       	pop	r28
 720:	df 91       	pop	r29
 722:	08 95       	ret

00000724 <DIO_u8SetPortPushUp>:
u8 DIO_u8SetPortPushUp(u8 u8PortNB,u8 u8Value){
 724:	df 93       	push	r29
 726:	cf 93       	push	r28
 728:	00 d0       	rcall	.+0      	; 0x72a <DIO_u8SetPortPushUp+0x6>
 72a:	00 d0       	rcall	.+0      	; 0x72c <DIO_u8SetPortPushUp+0x8>
 72c:	0f 92       	push	r0
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	8a 83       	std	Y+2, r24	; 0x02
 734:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable*/
		u8 u8ErrorState =0;
 736:	19 82       	std	Y+1, r1	; 0x01


		/*validate Input*/
		if (u8PortNB >=  DIO_MAXPORTNB){
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	18 f0       	brcs	.+6      	; 0x744 <DIO_u8SetPortPushUp+0x20>
			u8ErrorState =1;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	89 83       	std	Y+1, r24	; 0x01
 742:	43 c0       	rjmp	.+134    	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
		}
		else{
			u8ErrorState =0 ;
 744:	19 82       	std	Y+1, r1	; 0x01

			switch (u8PortNB){
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	3d 83       	std	Y+5, r19	; 0x05
 74e:	2c 83       	std	Y+4, r18	; 0x04
 750:	8c 81       	ldd	r24, Y+4	; 0x04
 752:	9d 81       	ldd	r25, Y+5	; 0x05
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	91 05       	cpc	r25, r1
 758:	f1 f0       	breq	.+60     	; 0x796 <DIO_u8SetPortPushUp+0x72>
 75a:	2c 81       	ldd	r18, Y+4	; 0x04
 75c:	3d 81       	ldd	r19, Y+5	; 0x05
 75e:	22 30       	cpi	r18, 0x02	; 2
 760:	31 05       	cpc	r19, r1
 762:	2c f4       	brge	.+10     	; 0x76e <DIO_u8SetPortPushUp+0x4a>
 764:	8c 81       	ldd	r24, Y+4	; 0x04
 766:	9d 81       	ldd	r25, Y+5	; 0x05
 768:	00 97       	sbiw	r24, 0x00	; 0
 76a:	61 f0       	breq	.+24     	; 0x784 <DIO_u8SetPortPushUp+0x60>
 76c:	2e c0       	rjmp	.+92     	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
 76e:	2c 81       	ldd	r18, Y+4	; 0x04
 770:	3d 81       	ldd	r19, Y+5	; 0x05
 772:	22 30       	cpi	r18, 0x02	; 2
 774:	31 05       	cpc	r19, r1
 776:	c1 f0       	breq	.+48     	; 0x7a8 <DIO_u8SetPortPushUp+0x84>
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	9d 81       	ldd	r25, Y+5	; 0x05
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	91 05       	cpc	r25, r1
 780:	e1 f0       	breq	.+56     	; 0x7ba <DIO_u8SetPortPushUp+0x96>
 782:	23 c0       	rjmp	.+70     	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
			case 0:
				DIO_u8SetPortDirection(DIO_U8_PORTA,u8Value);
 784:	8b e3       	ldi	r24, 0x3B	; 59
 786:	6b 81       	ldd	r22, Y+3	; 0x03
 788:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_u8SetPortDirection>
				DIO_U8_PORTA->ByteAccess =u8Value;
 78c:	eb e3       	ldi	r30, 0x3B	; 59
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	80 83       	st	Z, r24
 794:	1a c0       	rjmp	.+52     	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
				break;
			case 1:
				DIO_u8SetPortDirection(DIO_U8_PORTB,u8Value);
 796:	88 e3       	ldi	r24, 0x38	; 56
 798:	6b 81       	ldd	r22, Y+3	; 0x03
 79a:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_u8SetPortDirection>
				DIO_U8_PORTB->ByteAccess=u8Value;
 79e:	e8 e3       	ldi	r30, 0x38	; 56
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	80 83       	st	Z, r24
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
				break;
			case 2:
				DIO_u8SetPortDirection(DIO_U8_PORTC,u8Value);
 7a8:	85 e3       	ldi	r24, 0x35	; 53
 7aa:	6b 81       	ldd	r22, Y+3	; 0x03
 7ac:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_u8SetPortDirection>
				DIO_U8_PORTC->ByteAccess =u8Value;
 7b0:	e5 e3       	ldi	r30, 0x35	; 53
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	8b 81       	ldd	r24, Y+3	; 0x03
 7b6:	80 83       	st	Z, r24
 7b8:	08 c0       	rjmp	.+16     	; 0x7ca <DIO_u8SetPortPushUp+0xa6>
				break;
			case 3:
				DIO_u8SetPortDirection(DIO_U8_PORTD,u8Value);
 7ba:	82 e3       	ldi	r24, 0x32	; 50
 7bc:	6b 81       	ldd	r22, Y+3	; 0x03
 7be:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_u8SetPortDirection>
				DIO_U8_PORTD-> ByteAccess=u8Value;
 7c2:	e2 e3       	ldi	r30, 0x32	; 50
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	80 83       	st	Z, r24
				break;

			}
		}
		/*Function return */
		return u8ErrorState;
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
	}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <DIO_u8SetPinPushUp>:
u8 DIO_u8SetPinPushUp(u8 u8PinNB){
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <DIO_u8SetPinPushUp+0x6>
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <DIO_u8SetPinPushUp+0x8>
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <DIO_u8SetPinPushUp+0xa>
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	8c 83       	std	Y+4, r24	; 0x04
	/*Local variable*/
	u8 u8ErrorState =0;
 7ec:	1b 82       	std	Y+3, r1	; 0x03
	u8 u8PORT_ID ,u8PIN_ID;

	/*validate Input*/
	if (u8PinNB >=  DIO_MAXPINNB){
 7ee:	8c 81       	ldd	r24, Y+4	; 0x04
 7f0:	80 32       	cpi	r24, 0x20	; 32
 7f2:	18 f0       	brcs	.+6      	; 0x7fa <DIO_u8SetPinPushUp+0x1e>
		u8ErrorState =1;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	8b 83       	std	Y+3, r24	; 0x03
 7f8:	c6 c0       	rjmp	.+396    	; 0x986 <__stack+0x127>
	}
	else{
		u8ErrorState =0 ;
 7fa:	1b 82       	std	Y+3, r1	; 0x03
		u8PORT_ID = u8PinNB /PINS_PER_PORT;
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	86 95       	lsr	r24
 800:	86 95       	lsr	r24
 802:	86 95       	lsr	r24
 804:	8a 83       	std	Y+2, r24	; 0x02
		u8PIN_ID = u8PinNB % PINS_PER_PORT;
 806:	8c 81       	ldd	r24, Y+4	; 0x04
 808:	87 70       	andi	r24, 0x07	; 7
 80a:	89 83       	std	Y+1, r24	; 0x01
		switch (u8PORT_ID){
 80c:	8a 81       	ldd	r24, Y+2	; 0x02
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	3e 83       	std	Y+6, r19	; 0x06
 814:	2d 83       	std	Y+5, r18	; 0x05
 816:	8d 81       	ldd	r24, Y+5	; 0x05
 818:	9e 81       	ldd	r25, Y+6	; 0x06
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	91 05       	cpc	r25, r1
 81e:	09 f4       	brne	.+2      	; 0x822 <DIO_u8SetPinPushUp+0x46>
 820:	3e c0       	rjmp	.+124    	; 0x89e <__stack+0x3f>
 822:	2d 81       	ldd	r18, Y+5	; 0x05
 824:	3e 81       	ldd	r19, Y+6	; 0x06
 826:	22 30       	cpi	r18, 0x02	; 2
 828:	31 05       	cpc	r19, r1
 82a:	2c f4       	brge	.+10     	; 0x836 <DIO_u8SetPinPushUp+0x5a>
 82c:	8d 81       	ldd	r24, Y+5	; 0x05
 82e:	9e 81       	ldd	r25, Y+6	; 0x06
 830:	00 97       	sbiw	r24, 0x00	; 0
 832:	71 f0       	breq	.+28     	; 0x850 <DIO_u8SetPinPushUp+0x74>
 834:	a8 c0       	rjmp	.+336    	; 0x986 <__stack+0x127>
 836:	2d 81       	ldd	r18, Y+5	; 0x05
 838:	3e 81       	ldd	r19, Y+6	; 0x06
 83a:	22 30       	cpi	r18, 0x02	; 2
 83c:	31 05       	cpc	r19, r1
 83e:	09 f4       	brne	.+2      	; 0x842 <DIO_u8SetPinPushUp+0x66>
 840:	55 c0       	rjmp	.+170    	; 0x8ec <__stack+0x8d>
 842:	8d 81       	ldd	r24, Y+5	; 0x05
 844:	9e 81       	ldd	r25, Y+6	; 0x06
 846:	83 30       	cpi	r24, 0x03	; 3
 848:	91 05       	cpc	r25, r1
 84a:	09 f4       	brne	.+2      	; 0x84e <DIO_u8SetPinPushUp+0x72>
 84c:	76 c0       	rjmp	.+236    	; 0x93a <__stack+0xdb>
 84e:	9b c0       	rjmp	.+310    	; 0x986 <__stack+0x127>
		case 0:
			clr_bit(DIO_U8_PINA->ByteAccess,u8PIN_ID);
 850:	a9 e3       	ldi	r26, 0x39	; 57
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	e9 e3       	ldi	r30, 0x39	; 57
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	48 2f       	mov	r20, r24
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	28 2f       	mov	r18, r24
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	2a 95       	dec	r18
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	80 95       	com	r24
 872:	84 23       	and	r24, r20
 874:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTA->ByteAccess,u8PIN_ID);
 876:	ab e3       	ldi	r26, 0x3B	; 59
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	eb e3       	ldi	r30, 0x3B	; 59
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	48 2f       	mov	r20, r24
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	28 2f       	mov	r18, r24
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	02 2e       	mov	r0, r18
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	0a 94       	dec	r0
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	84 2b       	or	r24, r20
 89a:	8c 93       	st	X, r24
 89c:	74 c0       	rjmp	.+232    	; 0x986 <__stack+0x127>
			break;
		case 1:
			clr_bit(DIO_U8_PINB->ByteAccess,u8PIN_ID);
 89e:	a6 e3       	ldi	r26, 0x36	; 54
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e6 e3       	ldi	r30, 0x36	; 54
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	48 2f       	mov	r20, r24
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	28 2f       	mov	r18, r24
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	2a 95       	dec	r18
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	80 95       	com	r24
 8c0:	84 23       	and	r24, r20
 8c2:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTB->ByteAccess,u8PIN_ID);
 8c4:	a8 e3       	ldi	r26, 0x38	; 56
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	e8 e3       	ldi	r30, 0x38	; 56
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	48 2f       	mov	r20, r24
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	28 2f       	mov	r18, r24
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 2e       	mov	r0, r18
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	0a 94       	dec	r0
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
 8e6:	84 2b       	or	r24, r20
 8e8:	8c 93       	st	X, r24
 8ea:	4d c0       	rjmp	.+154    	; 0x986 <__stack+0x127>
			break;
		case 2:
			clr_bit(DIO_U8_PINC->ByteAccess,u8PIN_ID);
 8ec:	a3 e3       	ldi	r26, 0x33	; 51
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	e3 e3       	ldi	r30, 0x33	; 51
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	48 2f       	mov	r20, r24
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	2a 95       	dec	r18
 90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
 90c:	80 95       	com	r24
 90e:	84 23       	and	r24, r20
 910:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTC->ByteAccess,u8PIN_ID);
 912:	a5 e3       	ldi	r26, 0x35	; 53
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	e5 e3       	ldi	r30, 0x35	; 53
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	48 2f       	mov	r20, r24
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	28 2f       	mov	r18, r24
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 2e       	mov	r0, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
 934:	84 2b       	or	r24, r20
 936:	8c 93       	st	X, r24
 938:	26 c0       	rjmp	.+76     	; 0x986 <__stack+0x127>
			break;
		case 3:
			clr_bit(DIO_U8_PIND->ByteAccess,u8PIN_ID);
 93a:	a0 e3       	ldi	r26, 0x30	; 48
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e0 e3       	ldi	r30, 0x30	; 48
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	48 2f       	mov	r20, r24
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0xf7>
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	2a 95       	dec	r18
 958:	e2 f7       	brpl	.-8      	; 0x952 <__stack+0xf3>
 95a:	80 95       	com	r24
 95c:	84 23       	and	r24, r20
 95e:	8c 93       	st	X, r24
			set_bit(DIO_U8_PORTD->ByteAccess,u8PIN_ID);
 960:	a2 e3       	ldi	r26, 0x32	; 50
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e2 e3       	ldi	r30, 0x32	; 50
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	48 2f       	mov	r20, r24
 96c:	89 81       	ldd	r24, Y+1	; 0x01
 96e:	28 2f       	mov	r18, r24
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 2e       	mov	r0, r18
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x11f>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	0a 94       	dec	r0
 980:	e2 f7       	brpl	.-8      	; 0x97a <__stack+0x11b>
 982:	84 2b       	or	r24, r20
 984:	8c 93       	st	X, r24
			break;

		}
	}
	/*Function return */
	return u8ErrorState;
 986:	8b 81       	ldd	r24, Y+3	; 0x03
}
 988:	26 96       	adiw	r28, 0x06	; 6
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	08 95       	ret

0000099a <SSD_u8DisplayON>:


u8 SSD_Au8BCDValues[SDD_U8_AVAILABLE_VALUES]={0b00111111,0b00000110,0b01011011,0b11001111,0b01100110,0b1101101,0b01111101,0b00000111,0b01111111,0b01100111}; // if cathode
u8 SSD_Au8LastStates[SSD_U8_NB]={0};
u8 SSD_Au8LastValues[SSD_U8_NB]={0};
u8 SSD_u8DisplayON(u8 Copy_u8ID){
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <SSD_u8DisplayON+0x6>
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =0;
 9a6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8ID >= SSD_U8_NB){
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	82 30       	cpi	r24, 0x02	; 2
 9ac:	18 f0       	brcs	.+6      	; 0x9b4 <SSD_u8DisplayON+0x1a>
		Local_u8ErrorState=1;
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	89 83       	std	Y+1, r24	; 0x01
 9b2:	44 c0       	rjmp	.+136    	; 0xa3c <SSD_u8DisplayON+0xa2>
	}
	else{
		if (SSD_Au8SSDtype[Copy_u8ID]==SSD_U8_COMMON_CATHODE){
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	88 2f       	mov	r24, r24
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	fc 01       	movw	r30, r24
 9bc:	e0 5a       	subi	r30, 0xA0	; 160
 9be:	ff 4f       	sbci	r31, 0xFF	; 255
 9c0:	80 81       	ld	r24, Z
 9c2:	88 23       	and	r24, r24
 9c4:	e9 f4       	brne	.+58     	; 0xa00 <SSD_u8DisplayON+0x66>
			DIO_u8SetPinValue(SSD_Au8SSDpin[Copy_u8ID],DIO_U8_LOW) ;
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	88 2f       	mov	r24, r24
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	fc 01       	movw	r30, r24
 9ce:	ec 59       	subi	r30, 0x9C	; 156
 9d0:	ff 4f       	sbci	r31, 0xFF	; 255
 9d2:	80 81       	ld	r24, Z
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_u8SetPinValue>
			DIO_u8SetPortValue(SSD_Au8SSDport[Copy_u8ID],SSD_Au8LastValues[Copy_u8ID]);
 9da:	8a 81       	ldd	r24, Y+2	; 0x02
 9dc:	88 2f       	mov	r24, r24
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	fc 01       	movw	r30, r24
 9e2:	ee 59       	subi	r30, 0x9E	; 158
 9e4:	ff 4f       	sbci	r31, 0xFF	; 255
 9e6:	20 81       	ld	r18, Z
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	88 2f       	mov	r24, r24
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	fc 01       	movw	r30, r24
 9f0:	ee 58       	subi	r30, 0x8E	; 142
 9f2:	ff 4f       	sbci	r31, 0xFF	; 255
 9f4:	90 81       	ld	r25, Z
 9f6:	82 2f       	mov	r24, r18
 9f8:	69 2f       	mov	r22, r25
 9fa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_u8SetPortValue>
 9fe:	1e c0       	rjmp	.+60     	; 0xa3c <SSD_u8DisplayON+0xa2>
		}
		else {//common anode
			DIO_u8SetPinValue(SSD_Au8SSDpin[Copy_u8ID],DIO_U8_HIGH) ;
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	88 2f       	mov	r24, r24
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	fc 01       	movw	r30, r24
 a08:	ec 59       	subi	r30, 0x9C	; 156
 a0a:	ff 4f       	sbci	r31, 0xFF	; 255
 a0c:	80 81       	ld	r24, Z
 a0e:	61 e0       	ldi	r22, 0x01	; 1
 a10:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_u8SetPinValue>
			DIO_u8SetPortValue(SSD_Au8SSDport[Copy_u8ID],~SSD_Au8LastValues[Copy_u8ID]);
 a14:	8a 81       	ldd	r24, Y+2	; 0x02
 a16:	88 2f       	mov	r24, r24
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	fc 01       	movw	r30, r24
 a1c:	ee 59       	subi	r30, 0x9E	; 158
 a1e:	ff 4f       	sbci	r31, 0xFF	; 255
 a20:	20 81       	ld	r18, Z
 a22:	8a 81       	ldd	r24, Y+2	; 0x02
 a24:	88 2f       	mov	r24, r24
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	fc 01       	movw	r30, r24
 a2a:	ee 58       	subi	r30, 0x8E	; 142
 a2c:	ff 4f       	sbci	r31, 0xFF	; 255
 a2e:	80 81       	ld	r24, Z
 a30:	98 2f       	mov	r25, r24
 a32:	90 95       	com	r25
 a34:	82 2f       	mov	r24, r18
 a36:	69 2f       	mov	r22, r25
 a38:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_u8SetPortValue>
		}

	}
	return Local_u8ErrorState;
 a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <SSD_u8DisplayOFF>:
u8 SSD_u8DisplayOFF(u8 Copy_u8ID){
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	00 d0       	rcall	.+0      	; 0xa4e <SSD_u8DisplayOFF+0x6>
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
 a52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =0;
 a54:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8ID >= SSD_U8_NB){
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	82 30       	cpi	r24, 0x02	; 2
 a5a:	18 f0       	brcs	.+6      	; 0xa62 <SSD_u8DisplayOFF+0x1a>
		Local_u8ErrorState=1;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	89 83       	std	Y+1, r24	; 0x01
 a60:	1e c0       	rjmp	.+60     	; 0xa9e <SSD_u8DisplayOFF+0x56>
	}else{
		if (SSD_Au8SSDtype[Copy_u8ID]==SSD_U8_COMMON_CATHODE){//common cathode
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
 a64:	88 2f       	mov	r24, r24
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	fc 01       	movw	r30, r24
 a6a:	e0 5a       	subi	r30, 0xA0	; 160
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	80 81       	ld	r24, Z
 a70:	88 23       	and	r24, r24
 a72:	59 f4       	brne	.+22     	; 0xa8a <SSD_u8DisplayOFF+0x42>
			DIO_u8SetPinValue(SSD_Au8SSDpin[Copy_u8ID],DIO_U8_HIGH) ;
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	88 2f       	mov	r24, r24
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	fc 01       	movw	r30, r24
 a7c:	ec 59       	subi	r30, 0x9C	; 156
 a7e:	ff 4f       	sbci	r31, 0xFF	; 255
 a80:	80 81       	ld	r24, Z
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_u8SetPinValue>
 a88:	0a c0       	rjmp	.+20     	; 0xa9e <SSD_u8DisplayOFF+0x56>

		}
		else {//common anode
			DIO_u8SetPinValue(SSD_Au8SSDpin[Copy_u8ID],DIO_U8_LOW) ;
 a8a:	8a 81       	ldd	r24, Y+2	; 0x02
 a8c:	88 2f       	mov	r24, r24
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	fc 01       	movw	r30, r24
 a92:	ec 59       	subi	r30, 0x9C	; 156
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	80 81       	ld	r24, Z
 a98:	60 e0       	ldi	r22, 0x00	; 0
 a9a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_u8SetPinValue>
		}
	}

	return Local_u8ErrorState;
 a9e:	89 81       	ldd	r24, Y+1	; 0x01

}
 aa0:	0f 90       	pop	r0
 aa2:	0f 90       	pop	r0
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	08 95       	ret

00000aaa <SSD_u8WriteNumber>:
u8 SSD_u8WriteNumber(u8 Copy_u8ID,u8 Copy_u8Number){
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	00 d0       	rcall	.+0      	; 0xab0 <SSD_u8WriteNumber+0x6>
 ab0:	0f 92       	push	r0
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	8a 83       	std	Y+2, r24	; 0x02
 ab8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
 aba:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8ID >= SSD_U8_NB){
 abc:	8a 81       	ldd	r24, Y+2	; 0x02
 abe:	82 30       	cpi	r24, 0x02	; 2
 ac0:	18 f0       	brcs	.+6      	; 0xac8 <SSD_u8WriteNumber+0x1e>
		Local_u8ErrorState=1;
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	89 83       	std	Y+1, r24	; 0x01
 ac6:	44 c0       	rjmp	.+136    	; 0xb50 <SSD_u8WriteNumber+0xa6>
	}else if (Copy_u8Number >10 ){
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	8b 30       	cpi	r24, 0x0B	; 11
 acc:	18 f0       	brcs	.+6      	; 0xad4 <SSD_u8WriteNumber+0x2a>
		Local_u8ErrorState=1;
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	89 83       	std	Y+1, r24	; 0x01
 ad2:	3e c0       	rjmp	.+124    	; 0xb50 <SSD_u8WriteNumber+0xa6>
	}
	else{
		SSD_Au8LastValues[Copy_u8ID]=SSD_Au8BCDValues[Copy_u8Number];
 ad4:	8a 81       	ldd	r24, Y+2	; 0x02
 ad6:	28 2f       	mov	r18, r24
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	8b 81       	ldd	r24, Y+3	; 0x03
 adc:	88 2f       	mov	r24, r24
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	fc 01       	movw	r30, r24
 ae2:	ea 59       	subi	r30, 0x9A	; 154
 ae4:	ff 4f       	sbci	r31, 0xFF	; 255
 ae6:	80 81       	ld	r24, Z
 ae8:	f9 01       	movw	r30, r18
 aea:	ee 58       	subi	r30, 0x8E	; 142
 aec:	ff 4f       	sbci	r31, 0xFF	; 255
 aee:	80 83       	st	Z, r24
		if (SSD_Au8SSDtype[Copy_u8ID]==SSD_U8_COMMON_CATHODE){//common cathode
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	88 2f       	mov	r24, r24
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	fc 01       	movw	r30, r24
 af8:	e0 5a       	subi	r30, 0xA0	; 160
 afa:	ff 4f       	sbci	r31, 0xFF	; 255
 afc:	80 81       	ld	r24, Z
 afe:	88 23       	and	r24, r24
 b00:	99 f4       	brne	.+38     	; 0xb28 <SSD_u8WriteNumber+0x7e>
			DIO_u8SetPortValue(SSD_Au8SSDport[Copy_u8ID],SSD_Au8BCDValues[Copy_u8Number]);
 b02:	8a 81       	ldd	r24, Y+2	; 0x02
 b04:	88 2f       	mov	r24, r24
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	fc 01       	movw	r30, r24
 b0a:	ee 59       	subi	r30, 0x9E	; 158
 b0c:	ff 4f       	sbci	r31, 0xFF	; 255
 b0e:	20 81       	ld	r18, Z
 b10:	8b 81       	ldd	r24, Y+3	; 0x03
 b12:	88 2f       	mov	r24, r24
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	fc 01       	movw	r30, r24
 b18:	ea 59       	subi	r30, 0x9A	; 154
 b1a:	ff 4f       	sbci	r31, 0xFF	; 255
 b1c:	90 81       	ld	r25, Z
 b1e:	82 2f       	mov	r24, r18
 b20:	69 2f       	mov	r22, r25
 b22:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_u8SetPortValue>
 b26:	14 c0       	rjmp	.+40     	; 0xb50 <SSD_u8WriteNumber+0xa6>
		}else{// common anode
			DIO_u8SetPortValue(SSD_Au8SSDport[Copy_u8ID],~SSD_Au8BCDValues[Copy_u8Number]);
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	88 2f       	mov	r24, r24
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	fc 01       	movw	r30, r24
 b30:	ee 59       	subi	r30, 0x9E	; 158
 b32:	ff 4f       	sbci	r31, 0xFF	; 255
 b34:	20 81       	ld	r18, Z
 b36:	8b 81       	ldd	r24, Y+3	; 0x03
 b38:	88 2f       	mov	r24, r24
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	fc 01       	movw	r30, r24
 b3e:	ea 59       	subi	r30, 0x9A	; 154
 b40:	ff 4f       	sbci	r31, 0xFF	; 255
 b42:	80 81       	ld	r24, Z
 b44:	98 2f       	mov	r25, r24
 b46:	90 95       	com	r25
 b48:	82 2f       	mov	r24, r18
 b4a:	69 2f       	mov	r22, r25
 b4c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_u8SetPortValue>

		}


	}
	return Local_u8ErrorState;
 b50:	89 81       	ldd	r24, Y+1	; 0x01
}
 b52:	0f 90       	pop	r0
 b54:	0f 90       	pop	r0
 b56:	0f 90       	pop	r0
 b58:	cf 91       	pop	r28
 b5a:	df 91       	pop	r29
 b5c:	08 95       	ret

00000b5e <SWI_u8GetSwitchState>:
#include"STD_TYPES.h"
#include "DIO_interface.h"
#include"SWI_interface.h"
#include"SWI_private.h"
#include "SWI_config.h"
u8 SWI_u8GetSwitchState(u8 Copy_u8ID,u8* Pcopy_u8SwitchState){
 b5e:	df 93       	push	r29
 b60:	cf 93       	push	r28
 b62:	00 d0       	rcall	.+0      	; 0xb64 <SWI_u8GetSwitchState+0x6>
 b64:	00 d0       	rcall	.+0      	; 0xb66 <SWI_u8GetSwitchState+0x8>
 b66:	cd b7       	in	r28, 0x3d	; 61
 b68:	de b7       	in	r29, 0x3e	; 62
 b6a:	8a 83       	std	Y+2, r24	; 0x02
 b6c:	7c 83       	std	Y+4, r23	; 0x04
 b6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
 b70:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8ID >= SWI_U8_NB){
 b72:	8a 81       	ldd	r24, Y+2	; 0x02
 b74:	88 23       	and	r24, r24
 b76:	19 f0       	breq	.+6      	; 0xb7e <SWI_u8GetSwitchState+0x20>
		Local_u8ErrorState=1;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	89 83       	std	Y+1, r24	; 0x01
 b7c:	17 c0       	rjmp	.+46     	; 0xbac <SWI_u8GetSwitchState+0x4e>
	}
	else {
		Local_u8ErrorState=0;
 b7e:	19 82       	std	Y+1, r1	; 0x01
		if ( SWI_Au8ConnectionType[Copy_u8ID]== SWI_U8_INTERNAL_PULL_UP){
 b80:	8a 81       	ldd	r24, Y+2	; 0x02
 b82:	88 2f       	mov	r24, r24
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	fc 01       	movw	r30, r24
 b88:	eb 58       	subi	r30, 0x8B	; 139
 b8a:	ff 4f       	sbci	r31, 0xFF	; 255
 b8c:	80 81       	ld	r24, Z
 b8e:	88 23       	and	r24, r24
 b90:	69 f4       	brne	.+26     	; 0xbac <SWI_u8GetSwitchState+0x4e>
			Local_u8ErrorState=DIO_u8GetPinValue(SWI_Au8ConnectedPins[Copy_u8ID],Pcopy_u8SwitchState);
 b92:	8a 81       	ldd	r24, Y+2	; 0x02
 b94:	88 2f       	mov	r24, r24
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	fc 01       	movw	r30, r24
 b9a:	ec 58       	subi	r30, 0x8C	; 140
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	80 81       	ld	r24, Z
 ba0:	2b 81       	ldd	r18, Y+3	; 0x03
 ba2:	3c 81       	ldd	r19, Y+4	; 0x04
 ba4:	b9 01       	movw	r22, r18
 ba6:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_u8GetPinValue>
 baa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
 bac:	89 81       	ldd	r24, Y+1	; 0x01
}
 bae:	0f 90       	pop	r0
 bb0:	0f 90       	pop	r0
 bb2:	0f 90       	pop	r0
 bb4:	0f 90       	pop	r0
 bb6:	cf 91       	pop	r28
 bb8:	df 91       	pop	r29
 bba:	08 95       	ret

00000bbc <delay_ms>:
 */
#include"STD_TYPES.h"
#include"DIO_interface.h"
#include "SSD_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
 bbc:	df 93       	push	r29
 bbe:	cf 93       	push	r28
 bc0:	cd b7       	in	r28, 0x3d	; 61
 bc2:	de b7       	in	r29, 0x3e	; 62
 bc4:	28 97       	sbiw	r28, 0x08	; 8
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	de bf       	out	0x3e, r29	; 62
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	cd bf       	out	0x3d, r28	; 61
 bd0:	6d 83       	std	Y+5, r22	; 0x05
 bd2:	7e 83       	std	Y+6, r23	; 0x06
 bd4:	8f 83       	std	Y+7, r24	; 0x07
 bd6:	98 87       	std	Y+8, r25	; 0x08
	for (u32 i =0 ; i< value*150;i++){
 bd8:	19 82       	std	Y+1, r1	; 0x01
 bda:	1a 82       	std	Y+2, r1	; 0x02
 bdc:	1b 82       	std	Y+3, r1	; 0x03
 bde:	1c 82       	std	Y+4, r1	; 0x04
 be0:	0c c0       	rjmp	.+24     	; 0xbfa <delay_ms+0x3e>
		asm("NOP");
 be2:	00 00       	nop
#include"STD_TYPES.h"
#include"DIO_interface.h"
#include "SSD_interface.h"
//#include"LEDDriver_interface.h"
void delay_ms(u32 value){
	for (u32 i =0 ; i< value*150;i++){
 be4:	89 81       	ldd	r24, Y+1	; 0x01
 be6:	9a 81       	ldd	r25, Y+2	; 0x02
 be8:	ab 81       	ldd	r26, Y+3	; 0x03
 bea:	bc 81       	ldd	r27, Y+4	; 0x04
 bec:	01 96       	adiw	r24, 0x01	; 1
 bee:	a1 1d       	adc	r26, r1
 bf0:	b1 1d       	adc	r27, r1
 bf2:	89 83       	std	Y+1, r24	; 0x01
 bf4:	9a 83       	std	Y+2, r25	; 0x02
 bf6:	ab 83       	std	Y+3, r26	; 0x03
 bf8:	bc 83       	std	Y+4, r27	; 0x04
 bfa:	8d 81       	ldd	r24, Y+5	; 0x05
 bfc:	9e 81       	ldd	r25, Y+6	; 0x06
 bfe:	af 81       	ldd	r26, Y+7	; 0x07
 c00:	b8 85       	ldd	r27, Y+8	; 0x08
 c02:	26 e9       	ldi	r18, 0x96	; 150
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	40 e0       	ldi	r20, 0x00	; 0
 c08:	50 e0       	ldi	r21, 0x00	; 0
 c0a:	bc 01       	movw	r22, r24
 c0c:	cd 01       	movw	r24, r26
 c0e:	0e 94 75 06 	call	0xcea	; 0xcea <__mulsi3>
 c12:	9b 01       	movw	r18, r22
 c14:	ac 01       	movw	r20, r24
 c16:	89 81       	ldd	r24, Y+1	; 0x01
 c18:	9a 81       	ldd	r25, Y+2	; 0x02
 c1a:	ab 81       	ldd	r26, Y+3	; 0x03
 c1c:	bc 81       	ldd	r27, Y+4	; 0x04
 c1e:	82 17       	cp	r24, r18
 c20:	93 07       	cpc	r25, r19
 c22:	a4 07       	cpc	r26, r20
 c24:	b5 07       	cpc	r27, r21
 c26:	e8 f2       	brcs	.-70     	; 0xbe2 <delay_ms+0x26>
		asm("NOP");
	}
}
 c28:	28 96       	adiw	r28, 0x08	; 8
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	f8 94       	cli
 c2e:	de bf       	out	0x3e, r29	; 62
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	cd bf       	out	0x3d, r28	; 61
 c34:	cf 91       	pop	r28
 c36:	df 91       	pop	r29
 c38:	08 95       	ret

00000c3a <TwoScreens>:
void TwoScreens(u8 number1,u8 number2){
 c3a:	df 93       	push	r29
 c3c:	cf 93       	push	r28
 c3e:	00 d0       	rcall	.+0      	; 0xc40 <TwoScreens+0x6>
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62
 c44:	89 83       	std	Y+1, r24	; 0x01
 c46:	6a 83       	std	Y+2, r22	; 0x02
	SSD_u8DisplayOFF(1);
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	0e 94 24 05 	call	0xa48	; 0xa48 <SSD_u8DisplayOFF>
	SSD_u8WriteNumber(0,number1);
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	69 81       	ldd	r22, Y+1	; 0x01
 c52:	0e 94 55 05 	call	0xaaa	; 0xaaa <SSD_u8WriteNumber>
	SSD_u8DisplayON(0);
 c56:	80 e0       	ldi	r24, 0x00	; 0
 c58:	0e 94 cd 04 	call	0x99a	; 0x99a <SSD_u8DisplayON>
	delay_ms(7);
 c5c:	67 e0       	ldi	r22, 0x07	; 7
 c5e:	70 e0       	ldi	r23, 0x00	; 0
 c60:	80 e0       	ldi	r24, 0x00	; 0
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 de 05 	call	0xbbc	; 0xbbc <delay_ms>
	SSD_u8DisplayOFF(0);
 c68:	80 e0       	ldi	r24, 0x00	; 0
 c6a:	0e 94 24 05 	call	0xa48	; 0xa48 <SSD_u8DisplayOFF>
	SSD_u8WriteNumber(1,number2);
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	6a 81       	ldd	r22, Y+2	; 0x02
 c72:	0e 94 55 05 	call	0xaaa	; 0xaaa <SSD_u8WriteNumber>
	SSD_u8DisplayON(1);
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	0e 94 cd 04 	call	0x99a	; 0x99a <SSD_u8DisplayON>
	delay_ms(7);
 c7c:	67 e0       	ldi	r22, 0x07	; 7
 c7e:	70 e0       	ldi	r23, 0x00	; 0
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 de 05 	call	0xbbc	; 0xbbc <delay_ms>
}
 c88:	0f 90       	pop	r0
 c8a:	0f 90       	pop	r0
 c8c:	cf 91       	pop	r28
 c8e:	df 91       	pop	r29
 c90:	08 95       	ret

00000c92 <main>:
int main (void){
 c92:	df 93       	push	r29
 c94:	cf 93       	push	r28
 c96:	00 d0       	rcall	.+0      	; 0xc98 <main+0x6>
 c98:	0f 92       	push	r0
 c9a:	cd b7       	in	r28, 0x3d	; 61
 c9c:	de b7       	in	r29, 0x3e	; 62
		else {
			DIO_u8SetPinValue(DIO_U8_PIN_1,DIO_U8_LOW);
		}
		}
		*/
	DIO_u8SetPinDirection(DIO_U8_PIN_0,DIO_U8_OUTPUT);//common
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	61 e0       	ldi	r22, 0x01	; 1
 ca2:	0e 94 5d 00 	call	0xba	; 0xba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_U8_PIN_1,DIO_U8_OUTPUT);//common
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	61 e0       	ldi	r22, 0x01	; 1
 caa:	0e 94 5d 00 	call	0xba	; 0xba <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(DIO_U8_PORT3,0xFF);
 cae:	83 e0       	ldi	r24, 0x03	; 3
 cb0:	6f ef       	ldi	r22, 0xFF	; 255
 cb2:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_u8SetPortDirection>



	u8 i,j,x;
	while(1){
	for (  i =0,j=9 ; i< 10 ; i++,j--){
 cb6:	1b 82       	std	Y+3, r1	; 0x03
 cb8:	89 e0       	ldi	r24, 0x09	; 9
 cba:	8a 83       	std	Y+2, r24	; 0x02
 cbc:	12 c0       	rjmp	.+36     	; 0xce2 <main+0x50>
	for (x=0;x<100;x++ ){
 cbe:	19 82       	std	Y+1, r1	; 0x01
 cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <main+0x3e>
	TwoScreens(i,j);
 cc2:	8b 81       	ldd	r24, Y+3	; 0x03
 cc4:	6a 81       	ldd	r22, Y+2	; 0x02
 cc6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <TwoScreens>


	u8 i,j,x;
	while(1){
	for (  i =0,j=9 ; i< 10 ; i++,j--){
	for (x=0;x<100;x++ ){
 cca:	89 81       	ldd	r24, Y+1	; 0x01
 ccc:	8f 5f       	subi	r24, 0xFF	; 255
 cce:	89 83       	std	Y+1, r24	; 0x01
 cd0:	89 81       	ldd	r24, Y+1	; 0x01
 cd2:	84 36       	cpi	r24, 0x64	; 100
 cd4:	b0 f3       	brcs	.-20     	; 0xcc2 <main+0x30>



	u8 i,j,x;
	while(1){
	for (  i =0,j=9 ; i< 10 ; i++,j--){
 cd6:	8b 81       	ldd	r24, Y+3	; 0x03
 cd8:	8f 5f       	subi	r24, 0xFF	; 255
 cda:	8b 83       	std	Y+3, r24	; 0x03
 cdc:	8a 81       	ldd	r24, Y+2	; 0x02
 cde:	81 50       	subi	r24, 0x01	; 1
 ce0:	8a 83       	std	Y+2, r24	; 0x02
 ce2:	8b 81       	ldd	r24, Y+3	; 0x03
 ce4:	8a 30       	cpi	r24, 0x0A	; 10
 ce6:	58 f3       	brcs	.-42     	; 0xcbe <main+0x2c>
 ce8:	e6 cf       	rjmp	.-52     	; 0xcb6 <main+0x24>

00000cea <__mulsi3>:
 cea:	62 9f       	mul	r22, r18
 cec:	d0 01       	movw	r26, r0
 cee:	73 9f       	mul	r23, r19
 cf0:	f0 01       	movw	r30, r0
 cf2:	82 9f       	mul	r24, r18
 cf4:	e0 0d       	add	r30, r0
 cf6:	f1 1d       	adc	r31, r1
 cf8:	64 9f       	mul	r22, r20
 cfa:	e0 0d       	add	r30, r0
 cfc:	f1 1d       	adc	r31, r1
 cfe:	92 9f       	mul	r25, r18
 d00:	f0 0d       	add	r31, r0
 d02:	83 9f       	mul	r24, r19
 d04:	f0 0d       	add	r31, r0
 d06:	74 9f       	mul	r23, r20
 d08:	f0 0d       	add	r31, r0
 d0a:	65 9f       	mul	r22, r21
 d0c:	f0 0d       	add	r31, r0
 d0e:	99 27       	eor	r25, r25
 d10:	72 9f       	mul	r23, r18
 d12:	b0 0d       	add	r27, r0
 d14:	e1 1d       	adc	r30, r1
 d16:	f9 1f       	adc	r31, r25
 d18:	63 9f       	mul	r22, r19
 d1a:	b0 0d       	add	r27, r0
 d1c:	e1 1d       	adc	r30, r1
 d1e:	f9 1f       	adc	r31, r25
 d20:	bd 01       	movw	r22, r26
 d22:	cf 01       	movw	r24, r30
 d24:	11 24       	eor	r1, r1
 d26:	08 95       	ret

00000d28 <_exit>:
 d28:	f8 94       	cli

00000d2a <__stop_program>:
 d2a:	ff cf       	rjmp	.-2      	; 0xd2a <__stop_program>
