
fifthSis.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000734  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <util/delay.h>
#include "MACROS.h"
#include "typedef.h"
#include <avr/interrupt.h>

ISR(INT0_vect){//this is interrupt 0 for turn off the led
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	af 93       	push	r26
  7a:	bf 93       	push	r27
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	clr_bit(PORTA,0);// make the led on
  88:	ab e3       	ldi	r26, 0x3B	; 59
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	eb e3       	ldi	r30, 0x3B	; 59
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	8c 93       	st	X, r24
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <main>:

int main(){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	set_bit(DDRA,0);
  b6:	aa e3       	ldi	r26, 0x3A	; 58
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ea e3       	ldi	r30, 0x3A	; 58
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8c 93       	st	X, r24

	clr_bit(DDRD,2);//make pin 2 in PORTD input
  c4:	a1 e3       	ldi	r26, 0x31	; 49
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e1 e3       	ldi	r30, 0x31	; 49
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8c 93       	st	X, r24
	set_bit(PORTD,2);//make it PULLUP
  d2:	a2 e3       	ldi	r26, 0x32	; 50
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e2 e3       	ldi	r30, 0x32	; 50
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8c 93       	st	X, r24

	clr_bit(MCUCR,0);//LOW LEVEL NTERRUPT -> ISC00 bit
  e0:	a5 e5       	ldi	r26, 0x55	; 85
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e5       	ldi	r30, 0x55	; 85
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	8c 93       	st	X, r24
	clr_bit(MCUCR,1);//LOW LEVEL NTERRUPT -> ISC01 bit
  ee:	a5 e5       	ldi	r26, 0x55	; 85
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e5       	ldi	r30, 0x55	; 85
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8c 93       	st	X, r24

	set_bit(GICR,6);//EXTERNAL interrupt enable -> pin #6 = 1 for EXTERNAL INTERRUPT(PIE)
  fc:	ab e5       	ldi	r26, 0x5B	; 91
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	eb e5       	ldi	r30, 0x5B	; 91
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8c 93       	st	X, r24
	set_bit(SREG,7);//GLOBAL interrupt enable -> pin #7 = 1 is I pin for global interrupt(GIE)
 10a:	af e5       	ldi	r26, 0x5F	; 95
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ef e5       	ldi	r30, 0x5F	; 95
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	8c 93       	st	X, r24

	while(1){
		set_bit(PORTA,0);//make the led off
 118:	ab e3       	ldi	r26, 0x3B	; 59
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	eb e3       	ldi	r30, 0x3B	; 59
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8c 93       	st	X, r24
 126:	f8 cf       	rjmp	.-16     	; 0x118 <main+0x6a>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
